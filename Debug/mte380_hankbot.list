
mte380_hankbot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e60  08004e60  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e68  08004e68  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e6c  08004e6c  00014e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000005c  08004ecc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08004ecc  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010138  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002416  00000000  00000000  00030207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00032620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c1e  00000000  00000000  00033580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017635  00000000  00000000  0003419e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013909  00000000  00000000  0004b7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ff8e  00000000  00000000  0005f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045c4  00000000  00000000  000ef06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f3630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004dc4 	.word	0x08004dc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004dc4 	.word	0x08004dc4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <MX_GPIO_Init+0xf8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a36      	ldr	r2, [pc, #216]	; (8000684 <MX_GPIO_Init+0xf8>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b34      	ldr	r3, [pc, #208]	; (8000684 <MX_GPIO_Init+0xf8>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b30      	ldr	r3, [pc, #192]	; (8000684 <MX_GPIO_Init+0xf8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a2f      	ldr	r2, [pc, #188]	; (8000684 <MX_GPIO_Init+0xf8>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_GPIO_Init+0xf8>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b29      	ldr	r3, [pc, #164]	; (8000684 <MX_GPIO_Init+0xf8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a28      	ldr	r2, [pc, #160]	; (8000684 <MX_GPIO_Init+0xf8>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_GPIO_Init+0xf8>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <MX_GPIO_Init+0xf8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_GPIO_Init+0xf8>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_GPIO_Init+0xf8>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2120      	movs	r1, #32
 8000616:	481c      	ldr	r0, [pc, #112]	; (8000688 <MX_GPIO_Init+0xfc>)
 8000618:	f001 fa30 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	21f0      	movs	r1, #240	; 0xf0
 8000620:	481a      	ldr	r0, [pc, #104]	; (800068c <MX_GPIO_Init+0x100>)
 8000622:	f001 fa2b 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4814      	ldr	r0, [pc, #80]	; (8000690 <MX_GPIO_Init+0x104>)
 800063e:	f001 f899 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000642:	2320      	movs	r3, #32
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <MX_GPIO_Init+0xfc>)
 800065a:	f001 f88b 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800065e:	23f0      	movs	r3, #240	; 0xf0
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_GPIO_Init+0x100>)
 8000676:	f001 f87d 	bl	8001774 <HAL_GPIO_Init>

}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	40020400 	.word	0x40020400
 8000690:	40020800 	.word	0x40020800

08000694 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_I2C1_Init+0x58>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C1_Init+0x50>)
 80006d2:	f001 fa07 	bl	8001ae4 <HAL_I2C_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f9a4 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000078 	.word	0x20000078
 80006e8:	40005400 	.word	0x40005400
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_I2C3_Init+0x50>)
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <MX_I2C3_Init+0x54>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_I2C3_Init+0x50>)
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_I2C3_Init+0x58>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_I2C3_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_I2C3_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_I2C3_Init+0x50>)
 800070e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000712:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_I2C3_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_I2C3_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_I2C3_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_I2C3_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_I2C3_Init+0x50>)
 800072e:	f001 f9d9 	bl	8001ae4 <HAL_I2C_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f976 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000cc 	.word	0x200000cc
 8000744:	40005c00 	.word	0x40005c00
 8000748:	000186a0 	.word	0x000186a0

0800074c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a42      	ldr	r2, [pc, #264]	; (8000874 <HAL_I2C_MspInit+0x128>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d12d      	bne.n	80007ca <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b41      	ldr	r3, [pc, #260]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a40      	ldr	r2, [pc, #256]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800078a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800078e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000790:	2312      	movs	r3, #18
 8000792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800079c:	2304      	movs	r3, #4
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	4835      	ldr	r0, [pc, #212]	; (800087c <HAL_I2C_MspInit+0x130>)
 80007a8:	f000 ffe4 	bl	8001774 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	4b31      	ldr	r3, [pc, #196]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a30      	ldr	r2, [pc, #192]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 80007b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80007c8:	e050      	b.n	800086c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <HAL_I2C_MspInit+0x134>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d14b      	bne.n	800086c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	4b27      	ldr	r3, [pc, #156]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a26      	ldr	r2, [pc, #152]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
 80007e4:	4b24      	ldr	r3, [pc, #144]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	4a1f      	ldr	r2, [pc, #124]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800080c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000812:	2312      	movs	r3, #18
 8000814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800081e:	2304      	movs	r3, #4
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4816      	ldr	r0, [pc, #88]	; (8000884 <HAL_I2C_MspInit+0x138>)
 800082a:	f000 ffa3 	bl	8001774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800082e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000834:	2312      	movs	r3, #18
 8000836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000840:	2304      	movs	r3, #4
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <HAL_I2C_MspInit+0x13c>)
 800084c:	f000 ff92 	bl	8001774 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 800085a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_I2C_MspInit+0x12c>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
}
 800086c:	bf00      	nop
 800086e:	3730      	adds	r7, #48	; 0x30
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40005400 	.word	0x40005400
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400
 8000880:	40005c00 	.word	0x40005c00
 8000884:	40020800 	.word	0x40020800
 8000888:	40020000 	.word	0x40020000

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b098      	sub	sp, #96	; 0x60
 8000890:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f000 fe17 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f85b 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f7ff fe77 	bl	800058c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089e:	f000 fd75 	bl	800138c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008a2:	f7ff fef7 	bl	8000694 <MX_I2C1_Init>
  MX_I2C3_Init();
 80008a6:	f7ff ff23 	bl	80006f0 <MX_I2C3_Init>
  MX_TIM1_Init();
 80008aa:	f000 fafd 	bl	8000ea8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008ae:	f000 fb8b 	bl	8000fc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008b2:	f000 fbdd 	bl	8001070 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008b6:	2120      	movs	r1, #32
 80008b8:	4820      	ldr	r0, [pc, #128]	; (800093c <main+0xb0>)
 80008ba:	f001 f8f8 	bl	8001aae <HAL_GPIO_TogglePin>
  ISL29125_init(&hi2c1);
 80008be:	4820      	ldr	r0, [pc, #128]	; (8000940 <main+0xb4>)
 80008c0:	f000 f8b7 	bl	8000a32 <ISL29125_init>
  ISL29125_init(&hi2c3);
 80008c4:	481f      	ldr	r0, [pc, #124]	; (8000944 <main+0xb8>)
 80008c6:	f000 f8b4 	bl	8000a32 <ISL29125_init>
  ISL29125_config(&hi2c1, CFG1_MODE_RGB | CFG1_10KLUX, CFG2_IR_ADJUST_HIGH, CFG3_NO_INT);
 80008ca:	2300      	movs	r3, #0
 80008cc:	223f      	movs	r2, #63	; 0x3f
 80008ce:	210d      	movs	r1, #13
 80008d0:	481b      	ldr	r0, [pc, #108]	; (8000940 <main+0xb4>)
 80008d2:	f000 f911 	bl	8000af8 <ISL29125_config>
  ISL29125_config(&hi2c3, CFG1_MODE_RGB | CFG1_10KLUX, CFG2_IR_ADJUST_HIGH, CFG3_NO_INT);
 80008d6:	2300      	movs	r3, #0
 80008d8:	223f      	movs	r2, #63	; 0x3f
 80008da:	210d      	movs	r1, #13
 80008dc:	4819      	ldr	r0, [pc, #100]	; (8000944 <main+0xb8>)
 80008de:	f000 f90b 	bl	8000af8 <ISL29125_config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	color_data[0] = ISL29125_readRed(&hi2c1);
 80008e2:	4817      	ldr	r0, [pc, #92]	; (8000940 <main+0xb4>)
 80008e4:	f000 f95a 	bl	8000b9c <ISL29125_readRed>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  color_data[1] = ISL29125_readBlue(&hi2c1);
 80008ee:	4814      	ldr	r0, [pc, #80]	; (8000940 <main+0xb4>)
 80008f0:	f000 f96e 	bl	8000bd0 <ISL29125_readBlue>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  color_data[2] = ISL29125_readGreen(&hi2c1);
 80008fa:	4811      	ldr	r0, [pc, #68]	; (8000940 <main+0xb4>)
 80008fc:	f000 f95b 	bl	8000bb6 <ISL29125_readGreen>
 8000900:	4603      	mov	r3, r0
 8000902:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

  // Send out buffer
  char buf[64];
  sprintf(buf, "Red: %d, Blue: %d, Green: %d\r\n", color_data[0], color_data[1], color_data[2]);
 8000906:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800090a:	461a      	mov	r2, r3
 800090c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000910:	4619      	mov	r1, r3
 8000912:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000916:	4638      	mov	r0, r7
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	460b      	mov	r3, r1
 800091c:	490a      	ldr	r1, [pc, #40]	; (8000948 <main+0xbc>)
 800091e:	f003 fdad 	bl	800447c <siprintf>
  HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 8000922:	463b      	mov	r3, r7
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc5b 	bl	80001e0 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	4639      	mov	r1, r7
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <main+0xc0>)
 8000936:	f003 fa3b 	bl	8003db0 <HAL_UART_Transmit>
  {
 800093a:	e7d2      	b.n	80008e2 <main+0x56>
 800093c:	40020000 	.word	0x40020000
 8000940:	20000078 	.word	0x20000078
 8000944:	200000cc 	.word	0x200000cc
 8000948:	08004ddc 	.word	0x08004ddc
 800094c:	200001fc 	.word	0x200001fc

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fdac 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <SystemClock_Config+0xd0>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a28      	ldr	r2, [pc, #160]	; (8000a20 <SystemClock_Config+0xd0>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <SystemClock_Config+0xd0>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <SystemClock_Config+0xd4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800099c:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <SystemClock_Config+0xd4>)
 800099e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <SystemClock_Config+0xd4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b4:	2301      	movs	r3, #1
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	2310      	movs	r3, #16
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009bc:	2302      	movs	r3, #2
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009c4:	2310      	movs	r3, #16
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009d2:	2307      	movs	r3, #7
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 f87c 	bl	8002ad8 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009e6:	f000 f81f 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2302      	movs	r3, #2
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2102      	movs	r1, #2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fade 	bl	8002fc8 <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a12:	f000 f809 	bl	8000a28 <Error_Handler>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3750      	adds	r7, #80	; 0x50
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>

08000a32 <ISL29125_init>:

// Initialize - returns 0 if successful
// Verifies sensor is there by checking its device ID
// Resets all registers/configurations to factory default
// Sets configuration registers for the common use case
uint8_t ISL29125_init(I2C_HandleTypeDef *hi2c) {
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
    uint8_t ret = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0x00;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	73bb      	strb	r3, [r7, #14]

    //assume MX_I2C#_Init() is already called

    // Check device ID
    data = I2C_read8(hi2c, DEVICE_ID);
 8000a42:	2100      	movs	r1, #0
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f000 f8d1 	bl	8000bec <I2C_read8>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	73bb      	strb	r3, [r7, #14]
    if (data != 0x7D)
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	2b7d      	cmp	r3, #125	; 0x7d
 8000a52:	d003      	beq.n	8000a5c <ISL29125_init+0x2a>
      ret |= 1;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]

    // Reset registers
    ret |= ISL29125_reset(hi2c);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 f815 	bl	8000a8c <ISL29125_reset>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	73fb      	strb	r3, [r7, #15]

    // Set to RGB mode, 10k lux, and high IR compensation
    ret |= ISL29125_config(hi2c, CFG1_MODE_R | CFG1_375LUX, CFG2_IR_ADJUST_HIGH, CFG_DEFAULT);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	223f      	movs	r2, #63	; 0x3f
 8000a70:	2102      	movs	r1, #2
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f840 	bl	8000af8 <ISL29125_config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	73fb      	strb	r3, [r7, #15]

    return ret;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <ISL29125_reset>:

// Reset all registers - returns 0 if successful
uint8_t ISL29125_reset(I2C_HandleTypeDef *hi2c)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint8_t data = 0x00;
 8000a94:	2300      	movs	r3, #0
 8000a96:	73fb      	strb	r3, [r7, #15]
  // Reset registers
  I2C_write8(hi2c, DEVICE_ID, 0x46);
 8000a98:	2246      	movs	r2, #70	; 0x46
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f8e9 	bl	8000c74 <I2C_write8>
  // Check reset
  data = I2C_read8(hi2c, CONFIG_1);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 f8a1 	bl	8000bec <I2C_read8>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]
  data |= I2C_read8(hi2c, CONFIG_2);
 8000aae:	2102      	movs	r1, #2
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f89b 	bl	8000bec <I2C_read8>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	73fb      	strb	r3, [r7, #15]
  data |= I2C_read8(hi2c, CONFIG_3);
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 f892 	bl	8000bec <I2C_read8>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	73fb      	strb	r3, [r7, #15]
  data |= I2C_read8(hi2c, STATUS);
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f889 	bl	8000bec <I2C_read8>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	73fb      	strb	r3, [r7, #15]
  if (data != 0x00)
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <ISL29125_reset+0x62>
  {
    return 1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <ISL29125_reset+0x64>
  }
  return 0;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <ISL29125_config>:

// Setup Configuration registers (three registers) - returns 0 if successful
// Use CONFIG1 variables from SFE_ISL29125.h for first parameter config1, CONFIG2 for config2, 3 for 3
// Use CFG_DEFAULT for default configuration for that register
uint8_t ISL29125_config(I2C_HandleTypeDef *hi2c, uint8_t config1, uint8_t config2, uint8_t config3)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	4608      	mov	r0, r1
 8000b02:	4611      	mov	r1, r2
 8000b04:	461a      	mov	r2, r3
 8000b06:	4603      	mov	r3, r0
 8000b08:	70fb      	strb	r3, [r7, #3]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	70bb      	strb	r3, [r7, #2]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	707b      	strb	r3, [r7, #1]
  uint8_t ret = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]
  uint8_t data = 0x00;
 8000b16:	2300      	movs	r3, #0
 8000b18:	73bb      	strb	r3, [r7, #14]

  // Set 1st configuration register
  I2C_write8(hi2c, CONFIG_1, config1);
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	2101      	movs	r1, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 f8a7 	bl	8000c74 <I2C_write8>
  // Set 2nd configuration register
  I2C_write8(hi2c, CONFIG_2, config2);
 8000b26:	78bb      	ldrb	r3, [r7, #2]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 f8a1 	bl	8000c74 <I2C_write8>
  // Set 3rd configuration register
  I2C_write8(hi2c, CONFIG_3, config3);
 8000b32:	787b      	ldrb	r3, [r7, #1]
 8000b34:	461a      	mov	r2, r3
 8000b36:	2103      	movs	r1, #3
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f89b 	bl	8000c74 <I2C_write8>

  // Check if configurations were set correctly
  data = I2C_read8(hi2c, CONFIG_1);
 8000b3e:	2101      	movs	r1, #1
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 f853 	bl	8000bec <I2C_read8>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73bb      	strb	r3, [r7, #14]
  if (data != config1)
 8000b4a:	7bba      	ldrb	r2, [r7, #14]
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d003      	beq.n	8000b5a <ISL29125_config+0x62>
  {
    ret |= 1;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
  }
  data = I2C_read8(hi2c, CONFIG_2);
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f845 	bl	8000bec <I2C_read8>
 8000b62:	4603      	mov	r3, r0
 8000b64:	73bb      	strb	r3, [r7, #14]
  if (data != config2)
 8000b66:	7bba      	ldrb	r2, [r7, #14]
 8000b68:	78bb      	ldrb	r3, [r7, #2]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d003      	beq.n	8000b76 <ISL29125_config+0x7e>
  {
    ret |= 1;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
  }
  data = I2C_read8(hi2c, CONFIG_3);
 8000b76:	2103      	movs	r1, #3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 f837 	bl	8000bec <I2C_read8>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	73bb      	strb	r3, [r7, #14]
  if (data != config3)
 8000b82:	7bba      	ldrb	r2, [r7, #14]
 8000b84:	787b      	ldrb	r3, [r7, #1]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d003      	beq.n	8000b92 <ISL29125_config+0x9a>
  {
    ret |= 1;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <ISL29125_readRed>:
  return I2C_read16(hi2c, THRESHOLD_LL);
}

// Read the latest Sensor ADC reading for the color Red
uint16_t ISL29125_readRed(I2C_HandleTypeDef *hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  return I2C_read16(hi2c, RED_L);
 8000ba4:	210b      	movs	r1, #11
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f892 	bl	8000cd0 <I2C_read16>
 8000bac:	4603      	mov	r3, r0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <ISL29125_readGreen>:

// Read the latest Sensor ADC reading for the color Green
uint16_t ISL29125_readGreen(I2C_HandleTypeDef *hi2c)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  return I2C_read16(hi2c, GREEN_L);
 8000bbe:	2109      	movs	r1, #9
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f885 	bl	8000cd0 <I2C_read16>
 8000bc6:	4603      	mov	r3, r0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <ISL29125_readBlue>:

// Read the latest Sensor ADC reading for the color Blue
uint16_t ISL29125_readBlue(I2C_HandleTypeDef *hi2c)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  return I2C_read16(hi2c, BLUE_L);
 8000bd8:	210d      	movs	r1, #13
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 f878 	bl	8000cd0 <I2C_read16>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <I2C_read8>:
  return I2C_read8(hi2c, STATUS);
}

// Generic I2C read register (single byte)
uint8_t I2C_read8(I2C_HandleTypeDef *hi2c, uint8_t reg)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  uint8_t buf[12];

  // Tell I2C sensor that we want to read from register
  buf[0] = reg;
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(hi2c, ISL_I2C_8BIT_ADDR, buf, 1, HAL_MAX_DELAY);
 8000bfc:	2388      	movs	r3, #136	; 0x88
 8000bfe:	b299      	uxth	r1, r3
 8000c00:	f107 0208 	add.w	r2, r7, #8
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f001 f8ad 	bl	8001d6c <HAL_I2C_Master_Transmit>
 8000c12:	4603      	mov	r3, r0
 8000c14:	75fb      	strb	r3, [r7, #23]
  if ( ret != HAL_OK ) {
 8000c16:	7dfb      	ldrb	r3, [r7, #23]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d009      	beq.n	8000c30 <I2C_read8+0x44>
    strcpy((char*)buf, "Error Tx\r\n");
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <I2C_read8+0x80>)
 8000c22:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c24:	c303      	stmia	r3!, {r0, r1}
 8000c26:	801a      	strh	r2, [r3, #0]
 8000c28:	3302      	adds	r3, #2
 8000c2a:	0c12      	lsrs	r2, r2, #16
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e018      	b.n	8000c62 <I2C_read8+0x76>
  } else {
    // Read 1 byte from register
    ret = HAL_I2C_Master_Receive(hi2c, ISL_I2C_8BIT_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c30:	2388      	movs	r3, #136	; 0x88
 8000c32:	b299      	uxth	r1, r3
 8000c34:	f107 0208 	add.w	r2, r7, #8
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f001 f991 	bl	8001f68 <HAL_I2C_Master_Receive>
 8000c46:	4603      	mov	r3, r0
 8000c48:	75fb      	strb	r3, [r7, #23]
    if ( ret != HAL_OK ) {
 8000c4a:	7dfb      	ldrb	r3, [r7, #23]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d008      	beq.n	8000c62 <I2C_read8+0x76>
      strcpy((char*)buf, "Error Rx\r\n");
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <I2C_read8+0x84>)
 8000c56:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c58:	c303      	stmia	r3!, {r0, r1}
 8000c5a:	801a      	strh	r2, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	0c12      	lsrs	r2, r2, #16
 8000c60:	701a      	strb	r2, [r3, #0]
    }
  }
  return buf[0];
 8000c62:	7a3b      	ldrb	r3, [r7, #8]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	08004dfc 	.word	0x08004dfc
 8000c70:	08004e08 	.word	0x08004e08

08000c74 <I2C_write8>:

// Generic I2C write data to register (single byte)
uint8_t I2C_write8(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t data)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
 8000c80:	4613      	mov	r3, r2
 8000c82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret;
  uint8_t buf[12];

  // Byte Write Sequence: [start] Device Address Byte (ack) Address Byte (ack) Data Byte (ack) [stop]
  buf[0] = reg;
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	723b      	strb	r3, [r7, #8]
  buf[1] = data;
 8000c88:	78bb      	ldrb	r3, [r7, #2]
 8000c8a:	727b      	strb	r3, [r7, #9]
  ret = HAL_I2C_Master_Transmit(hi2c, ISL_I2C_8BIT_ADDR, buf, 2, HAL_MAX_DELAY);
 8000c8c:	2388      	movs	r3, #136	; 0x88
 8000c8e:	b299      	uxth	r1, r3
 8000c90:	f107 0208 	add.w	r2, r7, #8
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f001 f865 	bl	8001d6c <HAL_I2C_Master_Transmit>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	75fb      	strb	r3, [r7, #23]
  if ( ret != HAL_OK ) {
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00a      	beq.n	8000cc2 <I2C_write8+0x4e>
    strcpy((char*)buf, "Error Tx\r\n");
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <I2C_write8+0x58>)
 8000cb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cb4:	c303      	stmia	r3!, {r0, r1}
 8000cb6:	801a      	strh	r2, [r3, #0]
 8000cb8:	3302      	adds	r3, #2
 8000cba:	0c12      	lsrs	r2, r2, #16
 8000cbc:	701a      	strb	r2, [r3, #0]
    return 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <I2C_write8+0x50>
  }
  return 0;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	08004dfc 	.word	0x08004dfc

08000cd0 <I2C_read16>:

uint16_t I2C_read16(I2C_HandleTypeDef *hi2c, uint8_t reg)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  uint8_t buf[12];
  uint16_t val = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	82fb      	strh	r3, [r7, #22]

  // Tell I2C sensor that we want to read from register
  buf[0] = reg;
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	723b      	strb	r3, [r7, #8]
  ret = HAL_I2C_Master_Transmit(hi2c, ISL_I2C_8BIT_ADDR, buf, 1, HAL_MAX_DELAY);
 8000ce4:	2388      	movs	r3, #136	; 0x88
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	f107 0208 	add.w	r2, r7, #8
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f001 f839 	bl	8001d6c <HAL_I2C_Master_Transmit>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	757b      	strb	r3, [r7, #21]
  if ( ret != HAL_OK ) {
 8000cfe:	7d7b      	ldrb	r3, [r7, #21]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d009      	beq.n	8000d18 <I2C_read16+0x48>
    strcpy((char*)buf, "Error Tx\r\n");
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <I2C_read16+0x9c>)
 8000d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0c:	c303      	stmia	r3!, {r0, r1}
 8000d0e:	801a      	strh	r2, [r3, #0]
 8000d10:	3302      	adds	r3, #2
 8000d12:	0c12      	lsrs	r2, r2, #16
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e023      	b.n	8000d60 <I2C_read16+0x90>
  } else {
    // Read 2 byte from register
    ret = HAL_I2C_Master_Receive(hi2c, ISL_I2C_8BIT_ADDR, buf, 2, HAL_MAX_DELAY);
 8000d18:	2388      	movs	r3, #136	; 0x88
 8000d1a:	b299      	uxth	r1, r3
 8000d1c:	f107 0208 	add.w	r2, r7, #8
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2302      	movs	r3, #2
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f001 f91d 	bl	8001f68 <HAL_I2C_Master_Receive>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	757b      	strb	r3, [r7, #21]
    if ( ret != HAL_OK ) {
 8000d32:	7d7b      	ldrb	r3, [r7, #21]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <I2C_read16+0x7c>
      strcpy((char*)buf, "Error Rx\r\n");
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <I2C_read16+0xa0>)
 8000d3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d40:	c303      	stmia	r3!, {r0, r1}
 8000d42:	801a      	strh	r2, [r3, #0]
 8000d44:	3302      	adds	r3, #2
 8000d46:	0c12      	lsrs	r2, r2, #16
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e009      	b.n	8000d60 <I2C_read16+0x90>
    } else {
      //Combine the bytes
      val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000d4c:	7a3b      	ldrb	r3, [r7, #8]
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	7a7b      	ldrb	r3, [r7, #9]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	82fb      	strh	r3, [r7, #22]
    }
  }
  return val;
 8000d60:	8afb      	ldrh	r3, [r7, #22]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	08004dfc 	.word	0x08004dfc
 8000d70:	08004e08 	.word	0x08004e08

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000db2:	2007      	movs	r0, #7
 8000db4:	f000 fcaa 	bl	800170c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 fbaa 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f003 fb40 	bl	80044cc <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20018000 	.word	0x20018000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	20000120 	.word	0x20000120
 8000e80:	20000390 	.word	0x20000390

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b092      	sub	sp, #72	; 0x48
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2220      	movs	r2, #32
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 faf2 	bl	80044bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000eda:	4a3a      	ldr	r2, [pc, #232]	; (8000fc4 <MX_TIM1_Init+0x11c>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef8:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f04:	482e      	ldr	r0, [pc, #184]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000f06:	f002 fa7f 	bl	8003408 <HAL_TIM_PWM_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000f10:	f7ff fd8a 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f20:	4619      	mov	r1, r3
 8000f22:	4827      	ldr	r0, [pc, #156]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000f24:	f002 fe34 	bl	8003b90 <HAL_TIMEx_MasterConfigSynchronization>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f2e:	f7ff fd7b 	bl	8000a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f32:	2360      	movs	r3, #96	; 0x60
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	2208      	movs	r2, #8
 8000f54:	4619      	mov	r1, r3
 8000f56:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000f58:	f002 fb4c 	bl	80035f4 <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000f62:	f7ff fd61 	bl	8000a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000f70:	f002 fb40 	bl	80035f4 <HAL_TIM_PWM_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000f7a:	f7ff fd55 	bl	8000a28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000fa2:	f002 fe63 	bl	8003c6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000fac:	f7ff fd3c 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MX_TIM1_Init+0x118>)
 8000fb2:	f000 f989 	bl	80012c8 <HAL_TIM_MspPostInit>

}
 8000fb6:	bf00      	nop
 8000fb8:	3748      	adds	r7, #72	; 0x48
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000124 	.word	0x20000124
 8000fc4:	40010000 	.word	0x40010000

08000fc8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2224      	movs	r2, #36	; 0x24
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 fa70 	bl	80044bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_TIM2_Init+0xa4>)
 8000fe6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_TIM2_Init+0xa4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	; (800106c <MX_TIM2_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_TIM2_Init+0xa4>)
 8000ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_TIM2_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_TIM2_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800100c:	2301      	movs	r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001014:	2301      	movs	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <MX_TIM2_Init+0xa4>)
 8001038:	f002 fa35 	bl	80034a6 <HAL_TIM_Encoder_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001042:	f7ff fcf1 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4619      	mov	r1, r3
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <MX_TIM2_Init+0xa4>)
 8001054:	f002 fd9c 	bl	8003b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800105e:	f7ff fce3 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	3730      	adds	r7, #48	; 0x30
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000016c 	.word	0x2000016c

08001070 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b092      	sub	sp, #72	; 0x48
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	2224      	movs	r2, #36	; 0x24
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fa1c 	bl	80044bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108e:	463b      	mov	r3, r7
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010a0:	4b35      	ldr	r3, [pc, #212]	; (8001178 <MX_TIM3_Init+0x108>)
 80010a2:	4a36      	ldr	r2, [pc, #216]	; (800117c <MX_TIM3_Init+0x10c>)
 80010a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010a6:	4b34      	ldr	r3, [pc, #208]	; (8001178 <MX_TIM3_Init+0x108>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <MX_TIM3_Init+0x108>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010b2:	4b31      	ldr	r3, [pc, #196]	; (8001178 <MX_TIM3_Init+0x108>)
 80010b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <MX_TIM3_Init+0x108>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <MX_TIM3_Init+0x108>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010c6:	482c      	ldr	r0, [pc, #176]	; (8001178 <MX_TIM3_Init+0x108>)
 80010c8:	f002 f99e 	bl	8003408 <HAL_TIM_PWM_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80010d2:	f7ff fca9 	bl	8000a28 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010de:	2301      	movs	r3, #1
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC1Filter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ee:	2301      	movs	r3, #1
 80010f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.IC2Filter = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	481d      	ldr	r0, [pc, #116]	; (8001178 <MX_TIM3_Init+0x108>)
 8001102:	f002 f9d0 	bl	80034a6 <HAL_TIM_Encoder_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800110c:	f7ff fc8c 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4816      	ldr	r0, [pc, #88]	; (8001178 <MX_TIM3_Init+0x108>)
 8001120:	f002 fd36 	bl	8003b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 800112a:	f7ff fc7d 	bl	8000a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2360      	movs	r3, #96	; 0x60
 8001130:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	2208      	movs	r2, #8
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <MX_TIM3_Init+0x108>)
 8001146:	f002 fa55 	bl	80035f4 <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001150:	f7ff fc6a 	bl	8000a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	220c      	movs	r2, #12
 8001158:	4619      	mov	r1, r3
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <MX_TIM3_Init+0x108>)
 800115c:	f002 fa4a 	bl	80035f4 <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8001166:	f7ff fc5f 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <MX_TIM3_Init+0x108>)
 800116c:	f000 f8ac 	bl	80012c8 <HAL_TIM_MspPostInit>

}
 8001170:	bf00      	nop
 8001172:	3748      	adds	r7, #72	; 0x48
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200001b4 	.word	0x200001b4
 800117c:	40000400 	.word	0x40000400

08001180 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a23      	ldr	r2, [pc, #140]	; (800122c <HAL_TIM_PWM_MspInit+0xac>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d10e      	bne.n	80011c0 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <HAL_TIM_PWM_MspInit+0xb0>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a21      	ldr	r2, [pc, #132]	; (8001230 <HAL_TIM_PWM_MspInit+0xb0>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <HAL_TIM_PWM_MspInit+0xb0>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011be:	e030      	b.n	8001222 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_TIM_PWM_MspInit+0xb4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12b      	bne.n	8001222 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_TIM_PWM_MspInit+0xb0>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_TIM_PWM_MspInit+0xb0>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_TIM_PWM_MspInit+0xb0>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_TIM_PWM_MspInit+0xb0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <HAL_TIM_PWM_MspInit+0xb0>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_TIM_PWM_MspInit+0xb0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_R_A_Pin|Encoder_R_B_Pin;
 8001202:	23c0      	movs	r3, #192	; 0xc0
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001212:	2302      	movs	r3, #2
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <HAL_TIM_PWM_MspInit+0xb8>)
 800121e:	f000 faa9 	bl	8001774 <HAL_GPIO_Init>
}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40010000 	.word	0x40010000
 8001230:	40023800 	.word	0x40023800
 8001234:	40000400 	.word	0x40000400
 8001238:	40020000 	.word	0x40020000

0800123c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800125c:	d12c      	bne.n	80012b8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_TIM_Encoder_MspInit+0x84>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <HAL_TIM_Encoder_MspInit+0x84>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Encoder_L_B_Pin|Encoder_L_A_Pin;
 8001296:	f248 0302 	movw	r3, #32770	; 0x8002
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012a8:	2301      	movs	r3, #1
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <HAL_TIM_Encoder_MspInit+0x88>)
 80012b4:	f000 fa5e 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000

080012c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a24      	ldr	r2, [pc, #144]	; (8001378 <HAL_TIM_MspPostInit+0xb0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d11f      	bne.n	800132a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <HAL_TIM_MspPostInit+0xb4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a22      	ldr	r2, [pc, #136]	; (800137c <HAL_TIM_MspPostInit+0xb4>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_TIM_MspPostInit+0xb4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MTR_SPEED_L_Pin|MTR_SPEED_R_Pin;
 8001306:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001318:	2301      	movs	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4817      	ldr	r0, [pc, #92]	; (8001380 <HAL_TIM_MspPostInit+0xb8>)
 8001324:	f000 fa26 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001328:	e022      	b.n	8001370 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <HAL_TIM_MspPostInit+0xbc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d11d      	bne.n	8001370 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_TIM_MspPostInit+0xb4>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_TIM_MspPostInit+0xb4>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	6313      	str	r3, [r2, #48]	; 0x30
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_TIM_MspPostInit+0xb4>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_WRIST_Pin|SERVO_GRABBER_Pin;
 8001350:	2303      	movs	r3, #3
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001360:	2302      	movs	r3, #2
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <HAL_TIM_MspPostInit+0xc0>)
 800136c:	f000 fa02 	bl	8001774 <HAL_GPIO_Init>
}
 8001370:	bf00      	nop
 8001372:	3728      	adds	r7, #40	; 0x28
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40010000 	.word	0x40010000
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000
 8001384:	40000400 	.word	0x40000400
 8001388:	40020400 	.word	0x40020400

0800138c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <MX_USART2_UART_Init+0x50>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f002 fca4 	bl	8003d10 <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ce:	f7ff fb2b 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200001fc 	.word	0x200001fc
 80013dc:	40004400 	.word	0x40004400

080013e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_UART_MspInit+0x84>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d12b      	bne.n	800145a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_UART_MspInit+0x88>)
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_UART_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800143a:	230c      	movs	r3, #12
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144a:	2307      	movs	r3, #7
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_UART_MspInit+0x8c>)
 8001456:	f000 f98d 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40004400 	.word	0x40004400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001476:	490e      	ldr	r1, [pc, #56]	; (80014b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001478:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800148c:	4c0b      	ldr	r4, [pc, #44]	; (80014bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800149a:	f7ff fcf3 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149e:	f003 f81b 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7ff f9f3 	bl	800088c <main>
  bx  lr    
 80014a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014b4:	08004e70 	.word	0x08004e70
  ldr r2, =_sbss
 80014b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014bc:	20000390 	.word	0x20000390

080014c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_Init+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_Init+0x40>)
 80014ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_Init+0x40>)
 80014da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_Init+0x40>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_Init+0x40>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 f90d 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f808 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f8:	f7ff fc3c 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023c00 	.word	0x40023c00

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x54>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x58>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f917 	bl	800175a <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f8ed 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_InitTick+0x5c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000000 	.word	0x20000000
 8001560:	20000008 	.word	0x20000008
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008
 800158c:	20000244 	.word	0x20000244

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000244 	.word	0x20000244

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	; (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff47 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff5c 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff8e 	bl	8001660 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffb0 	bl	80016c8 <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e159      	b.n	8001a44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8148 	bne.w	8001a3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d005      	beq.n	80017c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d130      	bne.n	8001828 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 0201 	and.w	r2, r3, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b03      	cmp	r3, #3
 8001832:	d017      	beq.n	8001864 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d123      	bne.n	80018b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a2 	beq.w	8001a3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b57      	ldr	r3, [pc, #348]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a56      	ldr	r2, [pc, #344]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001916:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_GPIO_Init+0x2ec>)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <HAL_GPIO_Init+0x2f0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x202>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a48      	ldr	r2, [pc, #288]	; (8001a68 <HAL_GPIO_Init+0x2f4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x1fe>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a47      	ldr	r2, [pc, #284]	; (8001a6c <HAL_GPIO_Init+0x2f8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x1fa>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a46      	ldr	r2, [pc, #280]	; (8001a70 <HAL_GPIO_Init+0x2fc>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x1f6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a45      	ldr	r2, [pc, #276]	; (8001a74 <HAL_GPIO_Init+0x300>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x1f2>
 8001962:	2304      	movs	r3, #4
 8001964:	e008      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001966:	2307      	movs	r3, #7
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x204>
 800196a:	2303      	movs	r3, #3
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x204>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001976:	2300      	movs	r3, #0
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f002 0203 	and.w	r2, r2, #3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4093      	lsls	r3, r2
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001988:	4935      	ldr	r1, [pc, #212]	; (8001a60 <HAL_GPIO_Init+0x2ec>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_GPIO_Init+0x304>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ba:	4a2f      	ldr	r2, [pc, #188]	; (8001a78 <HAL_GPIO_Init+0x304>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_GPIO_Init+0x304>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e4:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <HAL_GPIO_Init+0x304>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_GPIO_Init+0x304>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0e:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <HAL_GPIO_Init+0x304>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_GPIO_Init+0x304>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a38:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <HAL_GPIO_Init+0x304>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	f67f aea2 	bls.w	8001790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40013c00 	.word	0x40013c00

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	041a      	lsls	r2, r3, #16
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	887b      	ldrh	r3, [r7, #2]
 8001ace:	400b      	ands	r3, r1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	619a      	str	r2, [r3, #24]
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e12b      	b.n	8001d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fe1e 	bl	800074c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	; 0x24
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b48:	f001 fc36 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8001b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4a81      	ldr	r2, [pc, #516]	; (8001d58 <HAL_I2C_Init+0x274>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d807      	bhi.n	8001b68 <HAL_I2C_Init+0x84>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4a80      	ldr	r2, [pc, #512]	; (8001d5c <HAL_I2C_Init+0x278>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	bf94      	ite	ls
 8001b60:	2301      	movls	r3, #1
 8001b62:	2300      	movhi	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e006      	b.n	8001b76 <HAL_I2C_Init+0x92>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4a7d      	ldr	r2, [pc, #500]	; (8001d60 <HAL_I2C_Init+0x27c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	bf94      	ite	ls
 8001b70:	2301      	movls	r3, #1
 8001b72:	2300      	movhi	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0e7      	b.n	8001d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4a78      	ldr	r2, [pc, #480]	; (8001d64 <HAL_I2C_Init+0x280>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0c9b      	lsrs	r3, r3, #18
 8001b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a6a      	ldr	r2, [pc, #424]	; (8001d58 <HAL_I2C_Init+0x274>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d802      	bhi.n	8001bb8 <HAL_I2C_Init+0xd4>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	e009      	b.n	8001bcc <HAL_I2C_Init+0xe8>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	4a69      	ldr	r2, [pc, #420]	; (8001d68 <HAL_I2C_Init+0x284>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	3301      	adds	r3, #1
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	495c      	ldr	r1, [pc, #368]	; (8001d58 <HAL_I2C_Init+0x274>)
 8001be8:	428b      	cmp	r3, r1
 8001bea:	d819      	bhi.n	8001c20 <HAL_I2C_Init+0x13c>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e59      	subs	r1, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bfa:	1c59      	adds	r1, r3, #1
 8001bfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c00:	400b      	ands	r3, r1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <HAL_I2C_Init+0x138>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1e59      	subs	r1, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1a:	e051      	b.n	8001cc0 <HAL_I2C_Init+0x1dc>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	e04f      	b.n	8001cc0 <HAL_I2C_Init+0x1dc>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d111      	bne.n	8001c4c <HAL_I2C_Init+0x168>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e58      	subs	r0, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	440b      	add	r3, r1
 8001c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e012      	b.n	8001c72 <HAL_I2C_Init+0x18e>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1e58      	subs	r0, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	0099      	lsls	r1, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf0c      	ite	eq
 8001c6c:	2301      	moveq	r3, #1
 8001c6e:	2300      	movne	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_I2C_Init+0x196>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e022      	b.n	8001cc0 <HAL_I2C_Init+0x1dc>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10e      	bne.n	8001ca0 <HAL_I2C_Init+0x1bc>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1e58      	subs	r0, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6859      	ldr	r1, [r3, #4]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	440b      	add	r3, r1
 8001c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c9e:	e00f      	b.n	8001cc0 <HAL_I2C_Init+0x1dc>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1e58      	subs	r0, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	0099      	lsls	r1, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	6809      	ldr	r1, [r1, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6911      	ldr	r1, [r2, #16]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68d2      	ldr	r2, [r2, #12]
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	000186a0 	.word	0x000186a0
 8001d5c:	001e847f 	.word	0x001e847f
 8001d60:	003d08ff 	.word	0x003d08ff
 8001d64:	431bde83 	.word	0x431bde83
 8001d68:	10624dd3 	.word	0x10624dd3

08001d6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	461a      	mov	r2, r3
 8001d78:	460b      	mov	r3, r1
 8001d7a:	817b      	strh	r3, [r7, #10]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fc06 	bl	8001590 <HAL_GetTick>
 8001d84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	f040 80e0 	bne.w	8001f54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2319      	movs	r3, #25
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4970      	ldr	r1, [pc, #448]	; (8001f60 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fc64 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
 8001dac:	e0d3      	b.n	8001f56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_I2C_Master_Transmit+0x50>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e0cc      	b.n	8001f56 <HAL_I2C_Master_Transmit+0x1ea>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d007      	beq.n	8001de2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2221      	movs	r2, #33	; 0x21
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	893a      	ldrh	r2, [r7, #8]
 8001e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e24:	8979      	ldrh	r1, [r7, #10]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	6a3a      	ldr	r2, [r7, #32]
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 face 	bl	80023cc <I2C_MasterRequestWrite>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e08d      	b.n	8001f56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e50:	e066      	b.n	8001f20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	6a39      	ldr	r1, [r7, #32]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fd22 	bl	80028a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00d      	beq.n	8001e7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d107      	bne.n	8001e7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e06b      	b.n	8001f56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d11b      	bne.n	8001ef4 <HAL_I2C_Master_Transmit+0x188>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d017      	beq.n	8001ef4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	6a39      	ldr	r1, [r7, #32]
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 fd19 	bl	8002930 <I2C_WaitOnBTFFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00d      	beq.n	8001f20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d107      	bne.n	8001f1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e01a      	b.n	8001f56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d194      	bne.n	8001e52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e000      	b.n	8001f56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f54:	2302      	movs	r3, #2
  }
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	00100002 	.word	0x00100002
 8001f64:	ffff0000 	.word	0xffff0000

08001f68 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	; 0x30
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	461a      	mov	r2, r3
 8001f74:	460b      	mov	r3, r1
 8001f76:	817b      	strh	r3, [r7, #10]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff fb08 	bl	8001590 <HAL_GetTick>
 8001f80:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	f040 8217 	bne.w	80023be <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2319      	movs	r3, #25
 8001f96:	2201      	movs	r2, #1
 8001f98:	497c      	ldr	r1, [pc, #496]	; (800218c <HAL_I2C_Master_Receive+0x224>)
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fb66 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e20a      	b.n	80023c0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_I2C_Master_Receive+0x50>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e203      	b.n	80023c0 <HAL_I2C_Master_Receive+0x458>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d007      	beq.n	8001fde <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2222      	movs	r2, #34	; 0x22
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	893a      	ldrh	r2, [r7, #8]
 800200e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4a5c      	ldr	r2, [pc, #368]	; (8002190 <HAL_I2C_Master_Receive+0x228>)
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002020:	8979      	ldrh	r1, [r7, #10]
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 fa52 	bl	80024d0 <I2C_MasterRequestRead>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1c4      	b.n	80023c0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	2b00      	cmp	r3, #0
 800203c:	d113      	bne.n	8002066 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	623b      	str	r3, [r7, #32]
 8002052:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e198      	b.n	8002398 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206a:	2b01      	cmp	r3, #1
 800206c:	d11b      	bne.n	80020a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e178      	b.n	8002398 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d11b      	bne.n	80020e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	e158      	b.n	8002398 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800210c:	e144      	b.n	8002398 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	2b03      	cmp	r3, #3
 8002114:	f200 80f1 	bhi.w	80022fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	2b01      	cmp	r3, #1
 800211e:	d123      	bne.n	8002168 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fc4b 	bl	80029c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e145      	b.n	80023c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002166:	e117      	b.n	8002398 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	2b02      	cmp	r3, #2
 800216e:	d14e      	bne.n	800220e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002176:	2200      	movs	r2, #0
 8002178:	4906      	ldr	r1, [pc, #24]	; (8002194 <HAL_I2C_Master_Receive+0x22c>)
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fa76 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e11a      	b.n	80023c0 <HAL_I2C_Master_Receive+0x458>
 800218a:	bf00      	nop
 800218c:	00100002 	.word	0x00100002
 8002190:	ffff0000 	.word	0xffff0000
 8002194:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800220c:	e0c4      	b.n	8002398 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	2200      	movs	r2, #0
 8002216:	496c      	ldr	r1, [pc, #432]	; (80023c8 <HAL_I2C_Master_Receive+0x460>)
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fa27 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0cb      	b.n	80023c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	2200      	movs	r2, #0
 8002272:	4955      	ldr	r1, [pc, #340]	; (80023c8 <HAL_I2C_Master_Receive+0x460>)
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f9f9 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e09d      	b.n	80023c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022f8:	e04e      	b.n	8002398 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fb5e 	bl	80029c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e058      	b.n	80023c0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b04      	cmp	r3, #4
 800234c:	d124      	bne.n	8002398 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	2b03      	cmp	r3, #3
 8002354:	d107      	bne.n	8002366 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002364:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	f47f aeb6 	bne.w	800210e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	00010004 	.word	0x00010004

080023cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	460b      	mov	r3, r1
 80023da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d006      	beq.n	80023f6 <I2C_MasterRequestWrite+0x2a>
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d003      	beq.n	80023f6 <I2C_MasterRequestWrite+0x2a>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023f4:	d108      	bne.n	8002408 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	e00b      	b.n	8002420 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	2b12      	cmp	r3, #18
 800240e:	d107      	bne.n	8002420 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f91d 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00d      	beq.n	8002454 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002446:	d103      	bne.n	8002450 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e035      	b.n	80024c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800245c:	d108      	bne.n	8002470 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800245e:	897b      	ldrh	r3, [r7, #10]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800246c:	611a      	str	r2, [r3, #16]
 800246e:	e01b      	b.n	80024a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002470:	897b      	ldrh	r3, [r7, #10]
 8002472:	11db      	asrs	r3, r3, #7
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f003 0306 	and.w	r3, r3, #6
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f063 030f 	orn	r3, r3, #15
 8002480:	b2da      	uxtb	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <I2C_MasterRequestWrite+0xfc>)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 f966 	bl	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e010      	b.n	80024c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800249e:	897b      	ldrh	r3, [r7, #10]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <I2C_MasterRequestWrite+0x100>)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f956 	bl	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	00010008 	.word	0x00010008
 80024cc:	00010002 	.word	0x00010002

080024d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	460b      	mov	r3, r1
 80024de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d006      	beq.n	800250a <I2C_MasterRequestRead+0x3a>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d003      	beq.n	800250a <I2C_MasterRequestRead+0x3a>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002508:	d108      	bne.n	800251c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e00b      	b.n	8002534 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	2b11      	cmp	r3, #17
 8002522:	d107      	bne.n	8002534 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f893 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255a:	d103      	bne.n	8002564 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e079      	b.n	800265c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002570:	d108      	bne.n	8002584 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002572:	897b      	ldrh	r3, [r7, #10]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	b2da      	uxtb	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	611a      	str	r2, [r3, #16]
 8002582:	e05f      	b.n	8002644 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002584:	897b      	ldrh	r3, [r7, #10]
 8002586:	11db      	asrs	r3, r3, #7
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f003 0306 	and.w	r3, r3, #6
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f063 030f 	orn	r3, r3, #15
 8002594:	b2da      	uxtb	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4930      	ldr	r1, [pc, #192]	; (8002664 <I2C_MasterRequestRead+0x194>)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f8dc 	bl	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e054      	b.n	800265c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025b2:	897b      	ldrh	r3, [r7, #10]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4929      	ldr	r1, [pc, #164]	; (8002668 <I2C_MasterRequestRead+0x198>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f8cc 	bl	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e044      	b.n	800265c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f831 	bl	800266c <I2C_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261e:	d103      	bne.n	8002628 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e017      	b.n	800265c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800262c:	897b      	ldrh	r3, [r7, #10]
 800262e:	11db      	asrs	r3, r3, #7
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f003 0306 	and.w	r3, r3, #6
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f063 030e 	orn	r3, r3, #14
 800263c:	b2da      	uxtb	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4907      	ldr	r1, [pc, #28]	; (8002668 <I2C_MasterRequestRead+0x198>)
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f888 	bl	8002760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	00010008 	.word	0x00010008
 8002668:	00010002 	.word	0x00010002

0800266c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800267c:	e048      	b.n	8002710 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d044      	beq.n	8002710 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002686:	f7fe ff83 	bl	8001590 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d139      	bne.n	8002710 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	0c1b      	lsrs	r3, r3, #16
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d10d      	bne.n	80026c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	43da      	mvns	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	4013      	ands	r3, r2
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf0c      	ite	eq
 80026b8:	2301      	moveq	r3, #1
 80026ba:	2300      	movne	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	e00c      	b.n	80026dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	43da      	mvns	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4013      	ands	r3, r2
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d116      	bne.n	8002710 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e023      	b.n	8002758 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	0c1b      	lsrs	r3, r3, #16
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d10d      	bne.n	8002736 <I2C_WaitOnFlagUntilTimeout+0xca>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	43da      	mvns	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4013      	ands	r3, r2
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	e00c      	b.n	8002750 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	43da      	mvns	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	4013      	ands	r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	429a      	cmp	r2, r3
 8002754:	d093      	beq.n	800267e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800276e:	e071      	b.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277e:	d123      	bne.n	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f043 0204 	orr.w	r2, r3, #4
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e067      	b.n	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	d041      	beq.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d0:	f7fe fede 	bl	8001590 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d302      	bcc.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d136      	bne.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10c      	bne.n	800280a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	43da      	mvns	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4013      	ands	r3, r2
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf14      	ite	ne
 8002802:	2301      	movne	r3, #1
 8002804:	2300      	moveq	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	e00b      	b.n	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	43da      	mvns	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4013      	ands	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d016      	beq.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e021      	b.n	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	0c1b      	lsrs	r3, r3, #16
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d10c      	bne.n	8002878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	43da      	mvns	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4013      	ands	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf14      	ite	ne
 8002870:	2301      	movne	r3, #1
 8002872:	2300      	moveq	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e00b      	b.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	43da      	mvns	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	bf14      	ite	ne
 800288a:	2301      	movne	r3, #1
 800288c:	2300      	moveq	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	f47f af6d 	bne.w	8002770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ac:	e034      	b.n	8002918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f8e3 	bl	8002a7a <I2C_IsAcknowledgeFailed>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e034      	b.n	8002928 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d028      	beq.n	8002918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c6:	f7fe fe63 	bl	8001590 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d302      	bcc.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d11d      	bne.n	8002918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b80      	cmp	r3, #128	; 0x80
 80028e8:	d016      	beq.n	8002918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e007      	b.n	8002928 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b80      	cmp	r3, #128	; 0x80
 8002924:	d1c3      	bne.n	80028ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800293c:	e034      	b.n	80029a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f89b 	bl	8002a7a <I2C_IsAcknowledgeFailed>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e034      	b.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d028      	beq.n	80029a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7fe fe1b 	bl	8001590 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d11d      	bne.n	80029a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d016      	beq.n	80029a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e007      	b.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d1c3      	bne.n	800293e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029cc:	e049      	b.n	8002a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d119      	bne.n	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e030      	b.n	8002a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a10:	f7fe fdbe 	bl	8001590 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d302      	bcc.n	8002a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11d      	bne.n	8002a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d016      	beq.n	8002a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e007      	b.n	8002a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d1ae      	bne.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a90:	d11b      	bne.n	8002aca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e267      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d075      	beq.n	8002be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af6:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d00c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d112      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4b82      	ldr	r3, [pc, #520]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d05b      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d157      	bne.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e242      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x74>
 8002b3e:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a75      	ldr	r2, [pc, #468]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x98>
 8002b56:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6f      	ldr	r2, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6c      	ldr	r2, [pc, #432]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b70:	4b69      	ldr	r3, [pc, #420]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a68      	ldr	r2, [pc, #416]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b66      	ldr	r3, [pc, #408]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a65      	ldr	r2, [pc, #404]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fcfe 	bl	8001590 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fcfa 	bl	8001590 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e207      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fcea 	bl	8001590 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fce6 	bl	8001590 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1f3      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	4b51      	ldr	r3, [pc, #324]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d063      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bee:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d11c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b44      	ldr	r3, [pc, #272]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1c7      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4937      	ldr	r1, [pc, #220]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	e03a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fc9f 	bl	8001590 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c56:	f7fe fc9b 	bl	8001590 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1a8      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4925      	ldr	r1, [pc, #148]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
 8002c88:	e015      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fc7e 	bl	8001590 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe fc7a 	bl	8001590 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e187      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d036      	beq.n	8002d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fc5e 	bl	8001590 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fc5a 	bl	8001590 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e167      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x200>
 8002cf6:	e01b      	b.n	8002d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fc47 	bl	8001590 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	e00e      	b.n	8002d24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe fc43 	bl	8001590 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d907      	bls.n	8002d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e150      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	42470000 	.word	0x42470000
 8002d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ea      	bne.n	8002d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8097 	beq.w	8002e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b7d      	ldr	r3, [pc, #500]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a7c      	ldr	r2, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b7a      	ldr	r3, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b77      	ldr	r3, [pc, #476]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b74      	ldr	r3, [pc, #464]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a73      	ldr	r2, [pc, #460]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fe fc03 	bl	8001590 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7fe fbff 	bl	8001590 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e10c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2ea>
 8002db4:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a63      	ldr	r2, [pc, #396]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x30c>
 8002dca:	4b5f      	ldr	r3, [pc, #380]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a5e      	ldr	r2, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	4a5b      	ldr	r2, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002de4:	4b58      	ldr	r3, [pc, #352]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	4b55      	ldr	r3, [pc, #340]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a54      	ldr	r2, [pc, #336]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df6:	f023 0304 	bic.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe fbc4 	bl	8001590 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fbc0 	bl	8001590 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0cb      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ee      	beq.n	8002e0c <HAL_RCC_OscConfig+0x334>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fe fbae 	bl	8001590 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fe fbaa 	bl	8001590 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0b5      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ee      	bne.n	8002e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	4a38      	ldr	r2, [pc, #224]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a1 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e76:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d05c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d141      	bne.n	8002f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fb7e 	bl	8001590 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe fb7a 	bl	8001590 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e087      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	491b      	ldr	r1, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fb53 	bl	8001590 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe fb4f 	bl	8001590 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e05c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x416>
 8002f0c:	e054      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fb3c 	bl	8001590 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fb38 	bl	8001590 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e045      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x444>
 8002f3a:	e03d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e038      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x4ec>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d121      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d11a      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0cc      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d90c      	bls.n	8003004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b65      	ldr	r3, [pc, #404]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0b8      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800301c:	4b59      	ldr	r3, [pc, #356]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	494d      	ldr	r1, [pc, #308]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e067      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4934      	ldr	r1, [pc, #208]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe fa6a 	bl	8001590 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe fa66 	bl	8001590 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20c      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e032      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4916      	ldr	r1, [pc, #88]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	490e      	ldr	r1, [pc, #56]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314e:	f000 f821 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003152:	4602      	mov	r2, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	490a      	ldr	r1, [pc, #40]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe f9ca 	bl	8001508 <HAL_InitTick>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	08004e14 	.word	0x08004e14
 800318c:	20000000 	.word	0x20000000
 8003190:	20000004 	.word	0x20000004

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003198:	b094      	sub	sp, #80	; 0x50
 800319a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	647b      	str	r3, [r7, #68]	; 0x44
 80031a0:	2300      	movs	r3, #0
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a4:	2300      	movs	r3, #0
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ac:	4b79      	ldr	r3, [pc, #484]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d00d      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x40>
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	f200 80e1 	bhi.w	8003380 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x34>
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x3a>
 80031c6:	e0db      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b73      	ldr	r3, [pc, #460]	; (8003398 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031cc:	e0db      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ce:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_GetSysClockFreq+0x208>)
 80031d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031d2:	e0d8      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031de:	4b6d      	ldr	r3, [pc, #436]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d063      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ea:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	2200      	movs	r2, #0
 80031f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fc:	633b      	str	r3, [r7, #48]	; 0x30
 80031fe:	2300      	movs	r3, #0
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
 8003202:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	f04f 0000 	mov.w	r0, #0
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	0159      	lsls	r1, r3, #5
 8003214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003218:	0150      	lsls	r0, r2, #5
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4621      	mov	r1, r4
 8003220:	1a51      	subs	r1, r2, r1
 8003222:	6139      	str	r1, [r7, #16]
 8003224:	4629      	mov	r1, r5
 8003226:	eb63 0301 	sbc.w	r3, r3, r1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003238:	4659      	mov	r1, fp
 800323a:	018b      	lsls	r3, r1, #6
 800323c:	4651      	mov	r1, sl
 800323e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003242:	4651      	mov	r1, sl
 8003244:	018a      	lsls	r2, r1, #6
 8003246:	4651      	mov	r1, sl
 8003248:	ebb2 0801 	subs.w	r8, r2, r1
 800324c:	4659      	mov	r1, fp
 800324e:	eb63 0901 	sbc.w	r9, r3, r1
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003266:	4690      	mov	r8, r2
 8003268:	4699      	mov	r9, r3
 800326a:	4623      	mov	r3, r4
 800326c:	eb18 0303 	adds.w	r3, r8, r3
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	462b      	mov	r3, r5
 8003274:	eb49 0303 	adc.w	r3, r9, r3
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003286:	4629      	mov	r1, r5
 8003288:	024b      	lsls	r3, r1, #9
 800328a:	4621      	mov	r1, r4
 800328c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003290:	4621      	mov	r1, r4
 8003292:	024a      	lsls	r2, r1, #9
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329a:	2200      	movs	r2, #0
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
 800329e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a4:	f7fc fff4 	bl	8000290 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b0:	e058      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	2200      	movs	r2, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	4611      	mov	r1, r2
 80032be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
 80032c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	f04f 0000 	mov.w	r0, #0
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	0159      	lsls	r1, r3, #5
 80032da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032de:	0150      	lsls	r0, r2, #5
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4641      	mov	r1, r8
 80032e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ea:	4649      	mov	r1, r9
 80032ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003304:	ebb2 040a 	subs.w	r4, r2, sl
 8003308:	eb63 050b 	sbc.w	r5, r3, fp
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	00eb      	lsls	r3, r5, #3
 8003316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331a:	00e2      	lsls	r2, r4, #3
 800331c:	4614      	mov	r4, r2
 800331e:	461d      	mov	r5, r3
 8003320:	4643      	mov	r3, r8
 8003322:	18e3      	adds	r3, r4, r3
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	464b      	mov	r3, r9
 8003328:	eb45 0303 	adc.w	r3, r5, r3
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800333a:	4629      	mov	r1, r5
 800333c:	028b      	lsls	r3, r1, #10
 800333e:	4621      	mov	r1, r4
 8003340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003344:	4621      	mov	r1, r4
 8003346:	028a      	lsls	r2, r1, #10
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334e:	2200      	movs	r2, #0
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	61fa      	str	r2, [r7, #28]
 8003354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003358:	f7fc ff9a 	bl	8000290 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	3301      	adds	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003374:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800337e:	e002      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetSysClockFreq+0x204>)
 8003382:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003388:	4618      	mov	r0, r3
 800338a:	3750      	adds	r7, #80	; 0x50
 800338c:	46bd      	mov	sp, r7
 800338e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	00f42400 	.word	0x00f42400
 800339c:	007a1200 	.word	0x007a1200

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000

080033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033bc:	f7ff fff0 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0a9b      	lsrs	r3, r3, #10
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08004e24 	.word	0x08004e24

080033e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e4:	f7ff ffdc 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0b5b      	lsrs	r3, r3, #13
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	08004e24 	.word	0x08004e24

08003408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e041      	b.n	800349e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fea6 	bl	8001180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f000 f996 	bl	8003778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e097      	b.n	80035ea <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd feb4 	bl	800123c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ea:	f023 0307 	bic.w	r3, r3, #7
 80034ee:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 f93c 	bl	8003778 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003528:	f023 0303 	bic.w	r3, r3, #3
 800352c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	4313      	orrs	r3, r2
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003546:	f023 030c 	bic.w	r3, r3, #12
 800354a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	4313      	orrs	r3, r2
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	011a      	lsls	r2, r3, #4
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	031b      	lsls	r3, r3, #12
 8003576:	4313      	orrs	r3, r2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003584:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800358c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	4313      	orrs	r3, r2
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800360e:	2302      	movs	r3, #2
 8003610:	e0ae      	b.n	8003770 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	f200 809f 	bhi.w	8003760 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003622:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	0800365d 	.word	0x0800365d
 800362c:	08003761 	.word	0x08003761
 8003630:	08003761 	.word	0x08003761
 8003634:	08003761 	.word	0x08003761
 8003638:	0800369d 	.word	0x0800369d
 800363c:	08003761 	.word	0x08003761
 8003640:	08003761 	.word	0x08003761
 8003644:	08003761 	.word	0x08003761
 8003648:	080036df 	.word	0x080036df
 800364c:	08003761 	.word	0x08003761
 8003650:	08003761 	.word	0x08003761
 8003654:	08003761 	.word	0x08003761
 8003658:	0800371f 	.word	0x0800371f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f908 	bl	8003878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0208 	orr.w	r2, r2, #8
 8003676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0204 	bic.w	r2, r2, #4
 8003686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6999      	ldr	r1, [r3, #24]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	619a      	str	r2, [r3, #24]
      break;
 800369a:	e064      	b.n	8003766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f94e 	bl	8003944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6999      	ldr	r1, [r3, #24]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	021a      	lsls	r2, r3, #8
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	619a      	str	r2, [r3, #24]
      break;
 80036dc:	e043      	b.n	8003766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f999 	bl	8003a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0208 	orr.w	r2, r2, #8
 80036f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0204 	bic.w	r2, r2, #4
 8003708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69d9      	ldr	r1, [r3, #28]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	61da      	str	r2, [r3, #28]
      break;
 800371c:	e023      	b.n	8003766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f9e3 	bl	8003af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69d9      	ldr	r1, [r3, #28]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	021a      	lsls	r2, r3, #8
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	61da      	str	r2, [r3, #28]
      break;
 800375e:	e002      	b.n	8003766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	75fb      	strb	r3, [r7, #23]
      break;
 8003764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800376e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a34      	ldr	r2, [pc, #208]	; (800385c <TIM_Base_SetConfig+0xe4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00f      	beq.n	80037b0 <TIM_Base_SetConfig+0x38>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d00b      	beq.n	80037b0 <TIM_Base_SetConfig+0x38>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a31      	ldr	r2, [pc, #196]	; (8003860 <TIM_Base_SetConfig+0xe8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d007      	beq.n	80037b0 <TIM_Base_SetConfig+0x38>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a30      	ldr	r2, [pc, #192]	; (8003864 <TIM_Base_SetConfig+0xec>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d003      	beq.n	80037b0 <TIM_Base_SetConfig+0x38>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <TIM_Base_SetConfig+0xf0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d108      	bne.n	80037c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <TIM_Base_SetConfig+0xe4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01b      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d0:	d017      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a22      	ldr	r2, [pc, #136]	; (8003860 <TIM_Base_SetConfig+0xe8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a21      	ldr	r2, [pc, #132]	; (8003864 <TIM_Base_SetConfig+0xec>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00f      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a20      	ldr	r2, [pc, #128]	; (8003868 <TIM_Base_SetConfig+0xf0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00b      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <TIM_Base_SetConfig+0xf4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <TIM_Base_SetConfig+0xf8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_Base_SetConfig+0x8a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <TIM_Base_SetConfig+0xfc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d108      	bne.n	8003814 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <TIM_Base_SetConfig+0xe4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d103      	bne.n	8003848 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	615a      	str	r2, [r3, #20]
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40010000 	.word	0x40010000
 8003860:	40000400 	.word	0x40000400
 8003864:	40000800 	.word	0x40000800
 8003868:	40000c00 	.word	0x40000c00
 800386c:	40014000 	.word	0x40014000
 8003870:	40014400 	.word	0x40014400
 8003874:	40014800 	.word	0x40014800

08003878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f023 0201 	bic.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f023 0302 	bic.w	r3, r3, #2
 80038c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <TIM_OC1_SetConfig+0xc8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d10c      	bne.n	80038ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0308 	bic.w	r3, r3, #8
 80038da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a13      	ldr	r2, [pc, #76]	; (8003940 <TIM_OC1_SetConfig+0xc8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d111      	bne.n	800391a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	621a      	str	r2, [r3, #32]
}
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40010000 	.word	0x40010000

08003944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f023 0210 	bic.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 0320 	bic.w	r3, r3, #32
 800398e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <TIM_OC2_SetConfig+0xd4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d10d      	bne.n	80039c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <TIM_OC2_SetConfig+0xd4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d113      	bne.n	80039f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	621a      	str	r2, [r3, #32]
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40010000 	.word	0x40010000

08003a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0303 	bic.w	r3, r3, #3
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <TIM_OC3_SetConfig+0xd0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10d      	bne.n	8003a96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a14      	ldr	r2, [pc, #80]	; (8003aec <TIM_OC3_SetConfig+0xd0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d113      	bne.n	8003ac6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40010000 	.word	0x40010000

08003af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	031b      	lsls	r3, r3, #12
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a10      	ldr	r2, [pc, #64]	; (8003b8c <TIM_OC4_SetConfig+0x9c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d109      	bne.n	8003b64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	019b      	lsls	r3, r3, #6
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40010000 	.word	0x40010000

08003b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e050      	b.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d013      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10c      	bne.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40014000 	.word	0x40014000

08003c6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e03d      	b.n	8003d04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e042      	b.n	8003da8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd fb52 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	; 0x24
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f91d 	bl	8003f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d16d      	bne.n	8003eac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_UART_Transmit+0x2c>
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e066      	b.n	8003eae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2221      	movs	r2, #33	; 0x21
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dee:	f7fd fbcf 	bl	8001590 <HAL_GetTick>
 8003df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e08:	d108      	bne.n	8003e1c <HAL_UART_Transmit+0x6c>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d104      	bne.n	8003e1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	e003      	b.n	8003e24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e24:	e02a      	b.n	8003e7c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2180      	movs	r1, #128	; 0x80
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f840 	bl	8003eb6 <UART_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e036      	b.n	8003eae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10b      	bne.n	8003e5e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	3302      	adds	r3, #2
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e007      	b.n	8003e6e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1cf      	bne.n	8003e26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2140      	movs	r1, #64	; 0x40
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f810 	bl	8003eb6 <UART_WaitOnFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e006      	b.n	8003eae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e000      	b.n	8003eae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003eac:	2302      	movs	r3, #2
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b090      	sub	sp, #64	; 0x40
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	e050      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d04c      	beq.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ed6:	f7fd fb5b 	bl	8001590 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d241      	bcs.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f06:	637a      	str	r2, [r7, #52]	; 0x34
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f3a:	623a      	str	r2, [r7, #32]
 8003f3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	69f9      	ldr	r1, [r7, #28]
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e5      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e00f      	b.n	8003f8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d09f      	beq.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3740      	adds	r7, #64	; 0x40
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f98:	b0c0      	sub	sp, #256	; 0x100
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb0:	68d9      	ldr	r1, [r3, #12]
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	ea40 0301 	orr.w	r3, r0, r1
 8003fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fec:	f021 010c 	bic.w	r1, r1, #12
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400e:	6999      	ldr	r1, [r3, #24]
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	ea40 0301 	orr.w	r3, r0, r1
 800401a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b8f      	ldr	r3, [pc, #572]	; (8004260 <UART_SetConfig+0x2cc>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d005      	beq.n	8004034 <UART_SetConfig+0xa0>
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b8d      	ldr	r3, [pc, #564]	; (8004264 <UART_SetConfig+0x2d0>)
 8004030:	429a      	cmp	r2, r3
 8004032:	d104      	bne.n	800403e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7ff f9d4 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 8004038:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800403c:	e003      	b.n	8004046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800403e:	f7ff f9bb 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8004042:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004050:	f040 810c 	bne.w	800426c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004058:	2200      	movs	r2, #0
 800405a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800405e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004066:	4622      	mov	r2, r4
 8004068:	462b      	mov	r3, r5
 800406a:	1891      	adds	r1, r2, r2
 800406c:	65b9      	str	r1, [r7, #88]	; 0x58
 800406e:	415b      	adcs	r3, r3
 8004070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004076:	4621      	mov	r1, r4
 8004078:	eb12 0801 	adds.w	r8, r2, r1
 800407c:	4629      	mov	r1, r5
 800407e:	eb43 0901 	adc.w	r9, r3, r1
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800408e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004096:	4690      	mov	r8, r2
 8004098:	4699      	mov	r9, r3
 800409a:	4623      	mov	r3, r4
 800409c:	eb18 0303 	adds.w	r3, r8, r3
 80040a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040a4:	462b      	mov	r3, r5
 80040a6:	eb49 0303 	adc.w	r3, r9, r3
 80040aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040c2:	460b      	mov	r3, r1
 80040c4:	18db      	adds	r3, r3, r3
 80040c6:	653b      	str	r3, [r7, #80]	; 0x50
 80040c8:	4613      	mov	r3, r2
 80040ca:	eb42 0303 	adc.w	r3, r2, r3
 80040ce:	657b      	str	r3, [r7, #84]	; 0x54
 80040d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040d8:	f7fc f8da 	bl	8000290 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b61      	ldr	r3, [pc, #388]	; (8004268 <UART_SetConfig+0x2d4>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011c      	lsls	r4, r3, #4
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	64b9      	str	r1, [r7, #72]	; 0x48
 8004104:	415b      	adcs	r3, r3
 8004106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800410c:	4641      	mov	r1, r8
 800410e:	eb12 0a01 	adds.w	sl, r2, r1
 8004112:	4649      	mov	r1, r9
 8004114:	eb43 0b01 	adc.w	fp, r3, r1
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800412c:	4692      	mov	sl, r2
 800412e:	469b      	mov	fp, r3
 8004130:	4643      	mov	r3, r8
 8004132:	eb1a 0303 	adds.w	r3, sl, r3
 8004136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800413a:	464b      	mov	r3, r9
 800413c:	eb4b 0303 	adc.w	r3, fp, r3
 8004140:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004150:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004158:	460b      	mov	r3, r1
 800415a:	18db      	adds	r3, r3, r3
 800415c:	643b      	str	r3, [r7, #64]	; 0x40
 800415e:	4613      	mov	r3, r2
 8004160:	eb42 0303 	adc.w	r3, r2, r3
 8004164:	647b      	str	r3, [r7, #68]	; 0x44
 8004166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800416a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800416e:	f7fc f88f 	bl	8000290 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4611      	mov	r1, r2
 8004178:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <UART_SetConfig+0x2d4>)
 800417a:	fba3 2301 	umull	r2, r3, r3, r1
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2264      	movs	r2, #100	; 0x64
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	1acb      	subs	r3, r1, r3
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800418e:	4b36      	ldr	r3, [pc, #216]	; (8004268 <UART_SetConfig+0x2d4>)
 8004190:	fba3 2302 	umull	r2, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800419c:	441c      	add	r4, r3
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041b8:	415b      	adcs	r3, r3
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041c0:	4641      	mov	r1, r8
 80041c2:	1851      	adds	r1, r2, r1
 80041c4:	6339      	str	r1, [r7, #48]	; 0x30
 80041c6:	4649      	mov	r1, r9
 80041c8:	414b      	adcs	r3, r1
 80041ca:	637b      	str	r3, [r7, #52]	; 0x34
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041d8:	4659      	mov	r1, fp
 80041da:	00cb      	lsls	r3, r1, #3
 80041dc:	4651      	mov	r1, sl
 80041de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e2:	4651      	mov	r1, sl
 80041e4:	00ca      	lsls	r2, r1, #3
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	4642      	mov	r2, r8
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041f4:	464b      	mov	r3, r9
 80041f6:	460a      	mov	r2, r1
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800420c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004214:	460b      	mov	r3, r1
 8004216:	18db      	adds	r3, r3, r3
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
 800421a:	4613      	mov	r3, r2
 800421c:	eb42 0303 	adc.w	r3, r2, r3
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800422a:	f7fc f831 	bl	8000290 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <UART_SetConfig+0x2d4>)
 8004234:	fba3 1302 	umull	r1, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	2164      	movs	r1, #100	; 0x64
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	3332      	adds	r3, #50	; 0x32
 8004246:	4a08      	ldr	r2, [pc, #32]	; (8004268 <UART_SetConfig+0x2d4>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	f003 0207 	and.w	r2, r3, #7
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4422      	add	r2, r4
 800425a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800425c:	e106      	b.n	800446c <UART_SetConfig+0x4d8>
 800425e:	bf00      	nop
 8004260:	40011000 	.word	0x40011000
 8004264:	40011400 	.word	0x40011400
 8004268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800426c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004270:	2200      	movs	r2, #0
 8004272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004276:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800427a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800427e:	4642      	mov	r2, r8
 8004280:	464b      	mov	r3, r9
 8004282:	1891      	adds	r1, r2, r2
 8004284:	6239      	str	r1, [r7, #32]
 8004286:	415b      	adcs	r3, r3
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800428e:	4641      	mov	r1, r8
 8004290:	1854      	adds	r4, r2, r1
 8004292:	4649      	mov	r1, r9
 8004294:	eb43 0501 	adc.w	r5, r3, r1
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	00eb      	lsls	r3, r5, #3
 80042a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a6:	00e2      	lsls	r2, r4, #3
 80042a8:	4614      	mov	r4, r2
 80042aa:	461d      	mov	r5, r3
 80042ac:	4643      	mov	r3, r8
 80042ae:	18e3      	adds	r3, r4, r3
 80042b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042b4:	464b      	mov	r3, r9
 80042b6:	eb45 0303 	adc.w	r3, r5, r3
 80042ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042da:	4629      	mov	r1, r5
 80042dc:	008b      	lsls	r3, r1, #2
 80042de:	4621      	mov	r1, r4
 80042e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e4:	4621      	mov	r1, r4
 80042e6:	008a      	lsls	r2, r1, #2
 80042e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042ec:	f7fb ffd0 	bl	8000290 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4b60      	ldr	r3, [pc, #384]	; (8004478 <UART_SetConfig+0x4e4>)
 80042f6:	fba3 2302 	umull	r2, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	011c      	lsls	r4, r3, #4
 80042fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004308:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800430c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004310:	4642      	mov	r2, r8
 8004312:	464b      	mov	r3, r9
 8004314:	1891      	adds	r1, r2, r2
 8004316:	61b9      	str	r1, [r7, #24]
 8004318:	415b      	adcs	r3, r3
 800431a:	61fb      	str	r3, [r7, #28]
 800431c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004320:	4641      	mov	r1, r8
 8004322:	1851      	adds	r1, r2, r1
 8004324:	6139      	str	r1, [r7, #16]
 8004326:	4649      	mov	r1, r9
 8004328:	414b      	adcs	r3, r1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004338:	4659      	mov	r1, fp
 800433a:	00cb      	lsls	r3, r1, #3
 800433c:	4651      	mov	r1, sl
 800433e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004342:	4651      	mov	r1, sl
 8004344:	00ca      	lsls	r2, r1, #3
 8004346:	4610      	mov	r0, r2
 8004348:	4619      	mov	r1, r3
 800434a:	4603      	mov	r3, r0
 800434c:	4642      	mov	r2, r8
 800434e:	189b      	adds	r3, r3, r2
 8004350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004354:	464b      	mov	r3, r9
 8004356:	460a      	mov	r2, r1
 8004358:	eb42 0303 	adc.w	r3, r2, r3
 800435c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	67bb      	str	r3, [r7, #120]	; 0x78
 800436a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004378:	4649      	mov	r1, r9
 800437a:	008b      	lsls	r3, r1, #2
 800437c:	4641      	mov	r1, r8
 800437e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004382:	4641      	mov	r1, r8
 8004384:	008a      	lsls	r2, r1, #2
 8004386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800438a:	f7fb ff81 	bl	8000290 <__aeabi_uldivmod>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4611      	mov	r1, r2
 8004394:	4b38      	ldr	r3, [pc, #224]	; (8004478 <UART_SetConfig+0x4e4>)
 8004396:	fba3 2301 	umull	r2, r3, r3, r1
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2264      	movs	r2, #100	; 0x64
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	1acb      	subs	r3, r1, r3
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	3332      	adds	r3, #50	; 0x32
 80043a8:	4a33      	ldr	r2, [pc, #204]	; (8004478 <UART_SetConfig+0x4e4>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b4:	441c      	add	r4, r3
 80043b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ba:	2200      	movs	r2, #0
 80043bc:	673b      	str	r3, [r7, #112]	; 0x70
 80043be:	677a      	str	r2, [r7, #116]	; 0x74
 80043c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	415b      	adcs	r3, r3
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d4:	4641      	mov	r1, r8
 80043d6:	1851      	adds	r1, r2, r1
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	4649      	mov	r1, r9
 80043dc:	414b      	adcs	r3, r1
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043ec:	4659      	mov	r1, fp
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	4651      	mov	r1, sl
 80043f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f6:	4651      	mov	r1, sl
 80043f8:	00ca      	lsls	r2, r1, #3
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	4642      	mov	r2, r8
 8004402:	189b      	adds	r3, r3, r2
 8004404:	66bb      	str	r3, [r7, #104]	; 0x68
 8004406:	464b      	mov	r3, r9
 8004408:	460a      	mov	r2, r1
 800440a:	eb42 0303 	adc.w	r3, r2, r3
 800440e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	663b      	str	r3, [r7, #96]	; 0x60
 800441a:	667a      	str	r2, [r7, #100]	; 0x64
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004428:	4649      	mov	r1, r9
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	4641      	mov	r1, r8
 800442e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004432:	4641      	mov	r1, r8
 8004434:	008a      	lsls	r2, r1, #2
 8004436:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800443a:	f7fb ff29 	bl	8000290 <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4b0d      	ldr	r3, [pc, #52]	; (8004478 <UART_SetConfig+0x4e4>)
 8004444:	fba3 1302 	umull	r1, r3, r3, r2
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	2164      	movs	r1, #100	; 0x64
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	3332      	adds	r3, #50	; 0x32
 8004456:	4a08      	ldr	r2, [pc, #32]	; (8004478 <UART_SetConfig+0x4e4>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4422      	add	r2, r4
 800446a:	609a      	str	r2, [r3, #8]
}
 800446c:	bf00      	nop
 800446e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004472:	46bd      	mov	sp, r7
 8004474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004478:	51eb851f 	.word	0x51eb851f

0800447c <siprintf>:
 800447c:	b40e      	push	{r1, r2, r3}
 800447e:	b500      	push	{lr}
 8004480:	b09c      	sub	sp, #112	; 0x70
 8004482:	ab1d      	add	r3, sp, #116	; 0x74
 8004484:	9002      	str	r0, [sp, #8]
 8004486:	9006      	str	r0, [sp, #24]
 8004488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800448c:	4809      	ldr	r0, [pc, #36]	; (80044b4 <siprintf+0x38>)
 800448e:	9107      	str	r1, [sp, #28]
 8004490:	9104      	str	r1, [sp, #16]
 8004492:	4909      	ldr	r1, [pc, #36]	; (80044b8 <siprintf+0x3c>)
 8004494:	f853 2b04 	ldr.w	r2, [r3], #4
 8004498:	9105      	str	r1, [sp, #20]
 800449a:	6800      	ldr	r0, [r0, #0]
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	a902      	add	r1, sp, #8
 80044a0:	f000 f992 	bl	80047c8 <_svfiprintf_r>
 80044a4:	9b02      	ldr	r3, [sp, #8]
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	b01c      	add	sp, #112	; 0x70
 80044ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80044b0:	b003      	add	sp, #12
 80044b2:	4770      	bx	lr
 80044b4:	20000058 	.word	0x20000058
 80044b8:	ffff0208 	.word	0xffff0208

080044bc <memset>:
 80044bc:	4402      	add	r2, r0
 80044be:	4603      	mov	r3, r0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <__errno>:
 80044cc:	4b01      	ldr	r3, [pc, #4]	; (80044d4 <__errno+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000058 	.word	0x20000058

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	4d0d      	ldr	r5, [pc, #52]	; (8004510 <__libc_init_array+0x38>)
 80044dc:	4c0d      	ldr	r4, [pc, #52]	; (8004514 <__libc_init_array+0x3c>)
 80044de:	1b64      	subs	r4, r4, r5
 80044e0:	10a4      	asrs	r4, r4, #2
 80044e2:	2600      	movs	r6, #0
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	4d0b      	ldr	r5, [pc, #44]	; (8004518 <__libc_init_array+0x40>)
 80044ea:	4c0c      	ldr	r4, [pc, #48]	; (800451c <__libc_init_array+0x44>)
 80044ec:	f000 fc6a 	bl	8004dc4 <_init>
 80044f0:	1b64      	subs	r4, r4, r5
 80044f2:	10a4      	asrs	r4, r4, #2
 80044f4:	2600      	movs	r6, #0
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	f855 3b04 	ldr.w	r3, [r5], #4
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	08004e68 	.word	0x08004e68
 8004514:	08004e68 	.word	0x08004e68
 8004518:	08004e68 	.word	0x08004e68
 800451c:	08004e6c 	.word	0x08004e6c

08004520 <__retarget_lock_acquire_recursive>:
 8004520:	4770      	bx	lr

08004522 <__retarget_lock_release_recursive>:
 8004522:	4770      	bx	lr

08004524 <_free_r>:
 8004524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004526:	2900      	cmp	r1, #0
 8004528:	d044      	beq.n	80045b4 <_free_r+0x90>
 800452a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800452e:	9001      	str	r0, [sp, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f1a1 0404 	sub.w	r4, r1, #4
 8004536:	bfb8      	it	lt
 8004538:	18e4      	addlt	r4, r4, r3
 800453a:	f000 f8df 	bl	80046fc <__malloc_lock>
 800453e:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <_free_r+0x94>)
 8004540:	9801      	ldr	r0, [sp, #4]
 8004542:	6813      	ldr	r3, [r2, #0]
 8004544:	b933      	cbnz	r3, 8004554 <_free_r+0x30>
 8004546:	6063      	str	r3, [r4, #4]
 8004548:	6014      	str	r4, [r2, #0]
 800454a:	b003      	add	sp, #12
 800454c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004550:	f000 b8da 	b.w	8004708 <__malloc_unlock>
 8004554:	42a3      	cmp	r3, r4
 8004556:	d908      	bls.n	800456a <_free_r+0x46>
 8004558:	6825      	ldr	r5, [r4, #0]
 800455a:	1961      	adds	r1, r4, r5
 800455c:	428b      	cmp	r3, r1
 800455e:	bf01      	itttt	eq
 8004560:	6819      	ldreq	r1, [r3, #0]
 8004562:	685b      	ldreq	r3, [r3, #4]
 8004564:	1949      	addeq	r1, r1, r5
 8004566:	6021      	streq	r1, [r4, #0]
 8004568:	e7ed      	b.n	8004546 <_free_r+0x22>
 800456a:	461a      	mov	r2, r3
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	b10b      	cbz	r3, 8004574 <_free_r+0x50>
 8004570:	42a3      	cmp	r3, r4
 8004572:	d9fa      	bls.n	800456a <_free_r+0x46>
 8004574:	6811      	ldr	r1, [r2, #0]
 8004576:	1855      	adds	r5, r2, r1
 8004578:	42a5      	cmp	r5, r4
 800457a:	d10b      	bne.n	8004594 <_free_r+0x70>
 800457c:	6824      	ldr	r4, [r4, #0]
 800457e:	4421      	add	r1, r4
 8004580:	1854      	adds	r4, r2, r1
 8004582:	42a3      	cmp	r3, r4
 8004584:	6011      	str	r1, [r2, #0]
 8004586:	d1e0      	bne.n	800454a <_free_r+0x26>
 8004588:	681c      	ldr	r4, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	6053      	str	r3, [r2, #4]
 800458e:	440c      	add	r4, r1
 8004590:	6014      	str	r4, [r2, #0]
 8004592:	e7da      	b.n	800454a <_free_r+0x26>
 8004594:	d902      	bls.n	800459c <_free_r+0x78>
 8004596:	230c      	movs	r3, #12
 8004598:	6003      	str	r3, [r0, #0]
 800459a:	e7d6      	b.n	800454a <_free_r+0x26>
 800459c:	6825      	ldr	r5, [r4, #0]
 800459e:	1961      	adds	r1, r4, r5
 80045a0:	428b      	cmp	r3, r1
 80045a2:	bf04      	itt	eq
 80045a4:	6819      	ldreq	r1, [r3, #0]
 80045a6:	685b      	ldreq	r3, [r3, #4]
 80045a8:	6063      	str	r3, [r4, #4]
 80045aa:	bf04      	itt	eq
 80045ac:	1949      	addeq	r1, r1, r5
 80045ae:	6021      	streq	r1, [r4, #0]
 80045b0:	6054      	str	r4, [r2, #4]
 80045b2:	e7ca      	b.n	800454a <_free_r+0x26>
 80045b4:	b003      	add	sp, #12
 80045b6:	bd30      	pop	{r4, r5, pc}
 80045b8:	20000388 	.word	0x20000388

080045bc <sbrk_aligned>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4e0e      	ldr	r6, [pc, #56]	; (80045f8 <sbrk_aligned+0x3c>)
 80045c0:	460c      	mov	r4, r1
 80045c2:	6831      	ldr	r1, [r6, #0]
 80045c4:	4605      	mov	r5, r0
 80045c6:	b911      	cbnz	r1, 80045ce <sbrk_aligned+0x12>
 80045c8:	f000 fba6 	bl	8004d18 <_sbrk_r>
 80045cc:	6030      	str	r0, [r6, #0]
 80045ce:	4621      	mov	r1, r4
 80045d0:	4628      	mov	r0, r5
 80045d2:	f000 fba1 	bl	8004d18 <_sbrk_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	d00a      	beq.n	80045f0 <sbrk_aligned+0x34>
 80045da:	1cc4      	adds	r4, r0, #3
 80045dc:	f024 0403 	bic.w	r4, r4, #3
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d007      	beq.n	80045f4 <sbrk_aligned+0x38>
 80045e4:	1a21      	subs	r1, r4, r0
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 fb96 	bl	8004d18 <_sbrk_r>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d101      	bne.n	80045f4 <sbrk_aligned+0x38>
 80045f0:	f04f 34ff 	mov.w	r4, #4294967295
 80045f4:	4620      	mov	r0, r4
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	2000038c 	.word	0x2000038c

080045fc <_malloc_r>:
 80045fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004600:	1ccd      	adds	r5, r1, #3
 8004602:	f025 0503 	bic.w	r5, r5, #3
 8004606:	3508      	adds	r5, #8
 8004608:	2d0c      	cmp	r5, #12
 800460a:	bf38      	it	cc
 800460c:	250c      	movcc	r5, #12
 800460e:	2d00      	cmp	r5, #0
 8004610:	4607      	mov	r7, r0
 8004612:	db01      	blt.n	8004618 <_malloc_r+0x1c>
 8004614:	42a9      	cmp	r1, r5
 8004616:	d905      	bls.n	8004624 <_malloc_r+0x28>
 8004618:	230c      	movs	r3, #12
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	2600      	movs	r6, #0
 800461e:	4630      	mov	r0, r6
 8004620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004624:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80046f8 <_malloc_r+0xfc>
 8004628:	f000 f868 	bl	80046fc <__malloc_lock>
 800462c:	f8d8 3000 	ldr.w	r3, [r8]
 8004630:	461c      	mov	r4, r3
 8004632:	bb5c      	cbnz	r4, 800468c <_malloc_r+0x90>
 8004634:	4629      	mov	r1, r5
 8004636:	4638      	mov	r0, r7
 8004638:	f7ff ffc0 	bl	80045bc <sbrk_aligned>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	4604      	mov	r4, r0
 8004640:	d155      	bne.n	80046ee <_malloc_r+0xf2>
 8004642:	f8d8 4000 	ldr.w	r4, [r8]
 8004646:	4626      	mov	r6, r4
 8004648:	2e00      	cmp	r6, #0
 800464a:	d145      	bne.n	80046d8 <_malloc_r+0xdc>
 800464c:	2c00      	cmp	r4, #0
 800464e:	d048      	beq.n	80046e2 <_malloc_r+0xe6>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	4631      	mov	r1, r6
 8004654:	4638      	mov	r0, r7
 8004656:	eb04 0903 	add.w	r9, r4, r3
 800465a:	f000 fb5d 	bl	8004d18 <_sbrk_r>
 800465e:	4581      	cmp	r9, r0
 8004660:	d13f      	bne.n	80046e2 <_malloc_r+0xe6>
 8004662:	6821      	ldr	r1, [r4, #0]
 8004664:	1a6d      	subs	r5, r5, r1
 8004666:	4629      	mov	r1, r5
 8004668:	4638      	mov	r0, r7
 800466a:	f7ff ffa7 	bl	80045bc <sbrk_aligned>
 800466e:	3001      	adds	r0, #1
 8004670:	d037      	beq.n	80046e2 <_malloc_r+0xe6>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	442b      	add	r3, r5
 8004676:	6023      	str	r3, [r4, #0]
 8004678:	f8d8 3000 	ldr.w	r3, [r8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d038      	beq.n	80046f2 <_malloc_r+0xf6>
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	42a2      	cmp	r2, r4
 8004684:	d12b      	bne.n	80046de <_malloc_r+0xe2>
 8004686:	2200      	movs	r2, #0
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	e00f      	b.n	80046ac <_malloc_r+0xb0>
 800468c:	6822      	ldr	r2, [r4, #0]
 800468e:	1b52      	subs	r2, r2, r5
 8004690:	d41f      	bmi.n	80046d2 <_malloc_r+0xd6>
 8004692:	2a0b      	cmp	r2, #11
 8004694:	d917      	bls.n	80046c6 <_malloc_r+0xca>
 8004696:	1961      	adds	r1, r4, r5
 8004698:	42a3      	cmp	r3, r4
 800469a:	6025      	str	r5, [r4, #0]
 800469c:	bf18      	it	ne
 800469e:	6059      	strne	r1, [r3, #4]
 80046a0:	6863      	ldr	r3, [r4, #4]
 80046a2:	bf08      	it	eq
 80046a4:	f8c8 1000 	streq.w	r1, [r8]
 80046a8:	5162      	str	r2, [r4, r5]
 80046aa:	604b      	str	r3, [r1, #4]
 80046ac:	4638      	mov	r0, r7
 80046ae:	f104 060b 	add.w	r6, r4, #11
 80046b2:	f000 f829 	bl	8004708 <__malloc_unlock>
 80046b6:	f026 0607 	bic.w	r6, r6, #7
 80046ba:	1d23      	adds	r3, r4, #4
 80046bc:	1af2      	subs	r2, r6, r3
 80046be:	d0ae      	beq.n	800461e <_malloc_r+0x22>
 80046c0:	1b9b      	subs	r3, r3, r6
 80046c2:	50a3      	str	r3, [r4, r2]
 80046c4:	e7ab      	b.n	800461e <_malloc_r+0x22>
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	6862      	ldr	r2, [r4, #4]
 80046ca:	d1dd      	bne.n	8004688 <_malloc_r+0x8c>
 80046cc:	f8c8 2000 	str.w	r2, [r8]
 80046d0:	e7ec      	b.n	80046ac <_malloc_r+0xb0>
 80046d2:	4623      	mov	r3, r4
 80046d4:	6864      	ldr	r4, [r4, #4]
 80046d6:	e7ac      	b.n	8004632 <_malloc_r+0x36>
 80046d8:	4634      	mov	r4, r6
 80046da:	6876      	ldr	r6, [r6, #4]
 80046dc:	e7b4      	b.n	8004648 <_malloc_r+0x4c>
 80046de:	4613      	mov	r3, r2
 80046e0:	e7cc      	b.n	800467c <_malloc_r+0x80>
 80046e2:	230c      	movs	r3, #12
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4638      	mov	r0, r7
 80046e8:	f000 f80e 	bl	8004708 <__malloc_unlock>
 80046ec:	e797      	b.n	800461e <_malloc_r+0x22>
 80046ee:	6025      	str	r5, [r4, #0]
 80046f0:	e7dc      	b.n	80046ac <_malloc_r+0xb0>
 80046f2:	605b      	str	r3, [r3, #4]
 80046f4:	deff      	udf	#255	; 0xff
 80046f6:	bf00      	nop
 80046f8:	20000388 	.word	0x20000388

080046fc <__malloc_lock>:
 80046fc:	4801      	ldr	r0, [pc, #4]	; (8004704 <__malloc_lock+0x8>)
 80046fe:	f7ff bf0f 	b.w	8004520 <__retarget_lock_acquire_recursive>
 8004702:	bf00      	nop
 8004704:	20000384 	.word	0x20000384

08004708 <__malloc_unlock>:
 8004708:	4801      	ldr	r0, [pc, #4]	; (8004710 <__malloc_unlock+0x8>)
 800470a:	f7ff bf0a 	b.w	8004522 <__retarget_lock_release_recursive>
 800470e:	bf00      	nop
 8004710:	20000384 	.word	0x20000384

08004714 <__ssputs_r>:
 8004714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004718:	688e      	ldr	r6, [r1, #8]
 800471a:	461f      	mov	r7, r3
 800471c:	42be      	cmp	r6, r7
 800471e:	680b      	ldr	r3, [r1, #0]
 8004720:	4682      	mov	sl, r0
 8004722:	460c      	mov	r4, r1
 8004724:	4690      	mov	r8, r2
 8004726:	d82c      	bhi.n	8004782 <__ssputs_r+0x6e>
 8004728:	898a      	ldrh	r2, [r1, #12]
 800472a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800472e:	d026      	beq.n	800477e <__ssputs_r+0x6a>
 8004730:	6965      	ldr	r5, [r4, #20]
 8004732:	6909      	ldr	r1, [r1, #16]
 8004734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004738:	eba3 0901 	sub.w	r9, r3, r1
 800473c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004740:	1c7b      	adds	r3, r7, #1
 8004742:	444b      	add	r3, r9
 8004744:	106d      	asrs	r5, r5, #1
 8004746:	429d      	cmp	r5, r3
 8004748:	bf38      	it	cc
 800474a:	461d      	movcc	r5, r3
 800474c:	0553      	lsls	r3, r2, #21
 800474e:	d527      	bpl.n	80047a0 <__ssputs_r+0x8c>
 8004750:	4629      	mov	r1, r5
 8004752:	f7ff ff53 	bl	80045fc <_malloc_r>
 8004756:	4606      	mov	r6, r0
 8004758:	b360      	cbz	r0, 80047b4 <__ssputs_r+0xa0>
 800475a:	6921      	ldr	r1, [r4, #16]
 800475c:	464a      	mov	r2, r9
 800475e:	f000 faeb 	bl	8004d38 <memcpy>
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476c:	81a3      	strh	r3, [r4, #12]
 800476e:	6126      	str	r6, [r4, #16]
 8004770:	6165      	str	r5, [r4, #20]
 8004772:	444e      	add	r6, r9
 8004774:	eba5 0509 	sub.w	r5, r5, r9
 8004778:	6026      	str	r6, [r4, #0]
 800477a:	60a5      	str	r5, [r4, #8]
 800477c:	463e      	mov	r6, r7
 800477e:	42be      	cmp	r6, r7
 8004780:	d900      	bls.n	8004784 <__ssputs_r+0x70>
 8004782:	463e      	mov	r6, r7
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	4632      	mov	r2, r6
 8004788:	4641      	mov	r1, r8
 800478a:	f000 faab 	bl	8004ce4 <memmove>
 800478e:	68a3      	ldr	r3, [r4, #8]
 8004790:	1b9b      	subs	r3, r3, r6
 8004792:	60a3      	str	r3, [r4, #8]
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	4433      	add	r3, r6
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	2000      	movs	r0, #0
 800479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a0:	462a      	mov	r2, r5
 80047a2:	f000 fad7 	bl	8004d54 <_realloc_r>
 80047a6:	4606      	mov	r6, r0
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d1e0      	bne.n	800476e <__ssputs_r+0x5a>
 80047ac:	6921      	ldr	r1, [r4, #16]
 80047ae:	4650      	mov	r0, sl
 80047b0:	f7ff feb8 	bl	8004524 <_free_r>
 80047b4:	230c      	movs	r3, #12
 80047b6:	f8ca 3000 	str.w	r3, [sl]
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c0:	81a3      	strh	r3, [r4, #12]
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295
 80047c6:	e7e9      	b.n	800479c <__ssputs_r+0x88>

080047c8 <_svfiprintf_r>:
 80047c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047cc:	4698      	mov	r8, r3
 80047ce:	898b      	ldrh	r3, [r1, #12]
 80047d0:	061b      	lsls	r3, r3, #24
 80047d2:	b09d      	sub	sp, #116	; 0x74
 80047d4:	4607      	mov	r7, r0
 80047d6:	460d      	mov	r5, r1
 80047d8:	4614      	mov	r4, r2
 80047da:	d50e      	bpl.n	80047fa <_svfiprintf_r+0x32>
 80047dc:	690b      	ldr	r3, [r1, #16]
 80047de:	b963      	cbnz	r3, 80047fa <_svfiprintf_r+0x32>
 80047e0:	2140      	movs	r1, #64	; 0x40
 80047e2:	f7ff ff0b 	bl	80045fc <_malloc_r>
 80047e6:	6028      	str	r0, [r5, #0]
 80047e8:	6128      	str	r0, [r5, #16]
 80047ea:	b920      	cbnz	r0, 80047f6 <_svfiprintf_r+0x2e>
 80047ec:	230c      	movs	r3, #12
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	e0d0      	b.n	8004998 <_svfiprintf_r+0x1d0>
 80047f6:	2340      	movs	r3, #64	; 0x40
 80047f8:	616b      	str	r3, [r5, #20]
 80047fa:	2300      	movs	r3, #0
 80047fc:	9309      	str	r3, [sp, #36]	; 0x24
 80047fe:	2320      	movs	r3, #32
 8004800:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004804:	f8cd 800c 	str.w	r8, [sp, #12]
 8004808:	2330      	movs	r3, #48	; 0x30
 800480a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80049b0 <_svfiprintf_r+0x1e8>
 800480e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004812:	f04f 0901 	mov.w	r9, #1
 8004816:	4623      	mov	r3, r4
 8004818:	469a      	mov	sl, r3
 800481a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800481e:	b10a      	cbz	r2, 8004824 <_svfiprintf_r+0x5c>
 8004820:	2a25      	cmp	r2, #37	; 0x25
 8004822:	d1f9      	bne.n	8004818 <_svfiprintf_r+0x50>
 8004824:	ebba 0b04 	subs.w	fp, sl, r4
 8004828:	d00b      	beq.n	8004842 <_svfiprintf_r+0x7a>
 800482a:	465b      	mov	r3, fp
 800482c:	4622      	mov	r2, r4
 800482e:	4629      	mov	r1, r5
 8004830:	4638      	mov	r0, r7
 8004832:	f7ff ff6f 	bl	8004714 <__ssputs_r>
 8004836:	3001      	adds	r0, #1
 8004838:	f000 80a9 	beq.w	800498e <_svfiprintf_r+0x1c6>
 800483c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800483e:	445a      	add	r2, fp
 8004840:	9209      	str	r2, [sp, #36]	; 0x24
 8004842:	f89a 3000 	ldrb.w	r3, [sl]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80a1 	beq.w	800498e <_svfiprintf_r+0x1c6>
 800484c:	2300      	movs	r3, #0
 800484e:	f04f 32ff 	mov.w	r2, #4294967295
 8004852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004856:	f10a 0a01 	add.w	sl, sl, #1
 800485a:	9304      	str	r3, [sp, #16]
 800485c:	9307      	str	r3, [sp, #28]
 800485e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004862:	931a      	str	r3, [sp, #104]	; 0x68
 8004864:	4654      	mov	r4, sl
 8004866:	2205      	movs	r2, #5
 8004868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800486c:	4850      	ldr	r0, [pc, #320]	; (80049b0 <_svfiprintf_r+0x1e8>)
 800486e:	f7fb fcbf 	bl	80001f0 <memchr>
 8004872:	9a04      	ldr	r2, [sp, #16]
 8004874:	b9d8      	cbnz	r0, 80048ae <_svfiprintf_r+0xe6>
 8004876:	06d0      	lsls	r0, r2, #27
 8004878:	bf44      	itt	mi
 800487a:	2320      	movmi	r3, #32
 800487c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004880:	0711      	lsls	r1, r2, #28
 8004882:	bf44      	itt	mi
 8004884:	232b      	movmi	r3, #43	; 0x2b
 8004886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800488a:	f89a 3000 	ldrb.w	r3, [sl]
 800488e:	2b2a      	cmp	r3, #42	; 0x2a
 8004890:	d015      	beq.n	80048be <_svfiprintf_r+0xf6>
 8004892:	9a07      	ldr	r2, [sp, #28]
 8004894:	4654      	mov	r4, sl
 8004896:	2000      	movs	r0, #0
 8004898:	f04f 0c0a 	mov.w	ip, #10
 800489c:	4621      	mov	r1, r4
 800489e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048a2:	3b30      	subs	r3, #48	; 0x30
 80048a4:	2b09      	cmp	r3, #9
 80048a6:	d94d      	bls.n	8004944 <_svfiprintf_r+0x17c>
 80048a8:	b1b0      	cbz	r0, 80048d8 <_svfiprintf_r+0x110>
 80048aa:	9207      	str	r2, [sp, #28]
 80048ac:	e014      	b.n	80048d8 <_svfiprintf_r+0x110>
 80048ae:	eba0 0308 	sub.w	r3, r0, r8
 80048b2:	fa09 f303 	lsl.w	r3, r9, r3
 80048b6:	4313      	orrs	r3, r2
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	46a2      	mov	sl, r4
 80048bc:	e7d2      	b.n	8004864 <_svfiprintf_r+0x9c>
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	1d19      	adds	r1, r3, #4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	9103      	str	r1, [sp, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bfbb      	ittet	lt
 80048ca:	425b      	neglt	r3, r3
 80048cc:	f042 0202 	orrlt.w	r2, r2, #2
 80048d0:	9307      	strge	r3, [sp, #28]
 80048d2:	9307      	strlt	r3, [sp, #28]
 80048d4:	bfb8      	it	lt
 80048d6:	9204      	strlt	r2, [sp, #16]
 80048d8:	7823      	ldrb	r3, [r4, #0]
 80048da:	2b2e      	cmp	r3, #46	; 0x2e
 80048dc:	d10c      	bne.n	80048f8 <_svfiprintf_r+0x130>
 80048de:	7863      	ldrb	r3, [r4, #1]
 80048e0:	2b2a      	cmp	r3, #42	; 0x2a
 80048e2:	d134      	bne.n	800494e <_svfiprintf_r+0x186>
 80048e4:	9b03      	ldr	r3, [sp, #12]
 80048e6:	1d1a      	adds	r2, r3, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	9203      	str	r2, [sp, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bfb8      	it	lt
 80048f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80048f4:	3402      	adds	r4, #2
 80048f6:	9305      	str	r3, [sp, #20]
 80048f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80049c0 <_svfiprintf_r+0x1f8>
 80048fc:	7821      	ldrb	r1, [r4, #0]
 80048fe:	2203      	movs	r2, #3
 8004900:	4650      	mov	r0, sl
 8004902:	f7fb fc75 	bl	80001f0 <memchr>
 8004906:	b138      	cbz	r0, 8004918 <_svfiprintf_r+0x150>
 8004908:	9b04      	ldr	r3, [sp, #16]
 800490a:	eba0 000a 	sub.w	r0, r0, sl
 800490e:	2240      	movs	r2, #64	; 0x40
 8004910:	4082      	lsls	r2, r0
 8004912:	4313      	orrs	r3, r2
 8004914:	3401      	adds	r4, #1
 8004916:	9304      	str	r3, [sp, #16]
 8004918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800491c:	4825      	ldr	r0, [pc, #148]	; (80049b4 <_svfiprintf_r+0x1ec>)
 800491e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004922:	2206      	movs	r2, #6
 8004924:	f7fb fc64 	bl	80001f0 <memchr>
 8004928:	2800      	cmp	r0, #0
 800492a:	d038      	beq.n	800499e <_svfiprintf_r+0x1d6>
 800492c:	4b22      	ldr	r3, [pc, #136]	; (80049b8 <_svfiprintf_r+0x1f0>)
 800492e:	bb1b      	cbnz	r3, 8004978 <_svfiprintf_r+0x1b0>
 8004930:	9b03      	ldr	r3, [sp, #12]
 8004932:	3307      	adds	r3, #7
 8004934:	f023 0307 	bic.w	r3, r3, #7
 8004938:	3308      	adds	r3, #8
 800493a:	9303      	str	r3, [sp, #12]
 800493c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800493e:	4433      	add	r3, r6
 8004940:	9309      	str	r3, [sp, #36]	; 0x24
 8004942:	e768      	b.n	8004816 <_svfiprintf_r+0x4e>
 8004944:	fb0c 3202 	mla	r2, ip, r2, r3
 8004948:	460c      	mov	r4, r1
 800494a:	2001      	movs	r0, #1
 800494c:	e7a6      	b.n	800489c <_svfiprintf_r+0xd4>
 800494e:	2300      	movs	r3, #0
 8004950:	3401      	adds	r4, #1
 8004952:	9305      	str	r3, [sp, #20]
 8004954:	4619      	mov	r1, r3
 8004956:	f04f 0c0a 	mov.w	ip, #10
 800495a:	4620      	mov	r0, r4
 800495c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004960:	3a30      	subs	r2, #48	; 0x30
 8004962:	2a09      	cmp	r2, #9
 8004964:	d903      	bls.n	800496e <_svfiprintf_r+0x1a6>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0c6      	beq.n	80048f8 <_svfiprintf_r+0x130>
 800496a:	9105      	str	r1, [sp, #20]
 800496c:	e7c4      	b.n	80048f8 <_svfiprintf_r+0x130>
 800496e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004972:	4604      	mov	r4, r0
 8004974:	2301      	movs	r3, #1
 8004976:	e7f0      	b.n	800495a <_svfiprintf_r+0x192>
 8004978:	ab03      	add	r3, sp, #12
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	462a      	mov	r2, r5
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <_svfiprintf_r+0x1f4>)
 8004980:	a904      	add	r1, sp, #16
 8004982:	4638      	mov	r0, r7
 8004984:	f3af 8000 	nop.w
 8004988:	1c42      	adds	r2, r0, #1
 800498a:	4606      	mov	r6, r0
 800498c:	d1d6      	bne.n	800493c <_svfiprintf_r+0x174>
 800498e:	89ab      	ldrh	r3, [r5, #12]
 8004990:	065b      	lsls	r3, r3, #25
 8004992:	f53f af2d 	bmi.w	80047f0 <_svfiprintf_r+0x28>
 8004996:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004998:	b01d      	add	sp, #116	; 0x74
 800499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499e:	ab03      	add	r3, sp, #12
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	462a      	mov	r2, r5
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <_svfiprintf_r+0x1f4>)
 80049a6:	a904      	add	r1, sp, #16
 80049a8:	4638      	mov	r0, r7
 80049aa:	f000 f879 	bl	8004aa0 <_printf_i>
 80049ae:	e7eb      	b.n	8004988 <_svfiprintf_r+0x1c0>
 80049b0:	08004e2c 	.word	0x08004e2c
 80049b4:	08004e36 	.word	0x08004e36
 80049b8:	00000000 	.word	0x00000000
 80049bc:	08004715 	.word	0x08004715
 80049c0:	08004e32 	.word	0x08004e32

080049c4 <_printf_common>:
 80049c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c8:	4616      	mov	r6, r2
 80049ca:	4699      	mov	r9, r3
 80049cc:	688a      	ldr	r2, [r1, #8]
 80049ce:	690b      	ldr	r3, [r1, #16]
 80049d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049d4:	4293      	cmp	r3, r2
 80049d6:	bfb8      	it	lt
 80049d8:	4613      	movlt	r3, r2
 80049da:	6033      	str	r3, [r6, #0]
 80049dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049e0:	4607      	mov	r7, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	b10a      	cbz	r2, 80049ea <_printf_common+0x26>
 80049e6:	3301      	adds	r3, #1
 80049e8:	6033      	str	r3, [r6, #0]
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	0699      	lsls	r1, r3, #26
 80049ee:	bf42      	ittt	mi
 80049f0:	6833      	ldrmi	r3, [r6, #0]
 80049f2:	3302      	addmi	r3, #2
 80049f4:	6033      	strmi	r3, [r6, #0]
 80049f6:	6825      	ldr	r5, [r4, #0]
 80049f8:	f015 0506 	ands.w	r5, r5, #6
 80049fc:	d106      	bne.n	8004a0c <_printf_common+0x48>
 80049fe:	f104 0a19 	add.w	sl, r4, #25
 8004a02:	68e3      	ldr	r3, [r4, #12]
 8004a04:	6832      	ldr	r2, [r6, #0]
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	42ab      	cmp	r3, r5
 8004a0a:	dc26      	bgt.n	8004a5a <_printf_common+0x96>
 8004a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a10:	1e13      	subs	r3, r2, #0
 8004a12:	6822      	ldr	r2, [r4, #0]
 8004a14:	bf18      	it	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	0692      	lsls	r2, r2, #26
 8004a1a:	d42b      	bmi.n	8004a74 <_printf_common+0xb0>
 8004a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a20:	4649      	mov	r1, r9
 8004a22:	4638      	mov	r0, r7
 8004a24:	47c0      	blx	r8
 8004a26:	3001      	adds	r0, #1
 8004a28:	d01e      	beq.n	8004a68 <_printf_common+0xa4>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	6922      	ldr	r2, [r4, #16]
 8004a2e:	f003 0306 	and.w	r3, r3, #6
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	bf02      	ittt	eq
 8004a36:	68e5      	ldreq	r5, [r4, #12]
 8004a38:	6833      	ldreq	r3, [r6, #0]
 8004a3a:	1aed      	subeq	r5, r5, r3
 8004a3c:	68a3      	ldr	r3, [r4, #8]
 8004a3e:	bf0c      	ite	eq
 8004a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a44:	2500      	movne	r5, #0
 8004a46:	4293      	cmp	r3, r2
 8004a48:	bfc4      	itt	gt
 8004a4a:	1a9b      	subgt	r3, r3, r2
 8004a4c:	18ed      	addgt	r5, r5, r3
 8004a4e:	2600      	movs	r6, #0
 8004a50:	341a      	adds	r4, #26
 8004a52:	42b5      	cmp	r5, r6
 8004a54:	d11a      	bne.n	8004a8c <_printf_common+0xc8>
 8004a56:	2000      	movs	r0, #0
 8004a58:	e008      	b.n	8004a6c <_printf_common+0xa8>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	4649      	mov	r1, r9
 8004a60:	4638      	mov	r0, r7
 8004a62:	47c0      	blx	r8
 8004a64:	3001      	adds	r0, #1
 8004a66:	d103      	bne.n	8004a70 <_printf_common+0xac>
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a70:	3501      	adds	r5, #1
 8004a72:	e7c6      	b.n	8004a02 <_printf_common+0x3e>
 8004a74:	18e1      	adds	r1, r4, r3
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	2030      	movs	r0, #48	; 0x30
 8004a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a7e:	4422      	add	r2, r4
 8004a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a88:	3302      	adds	r3, #2
 8004a8a:	e7c7      	b.n	8004a1c <_printf_common+0x58>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4622      	mov	r2, r4
 8004a90:	4649      	mov	r1, r9
 8004a92:	4638      	mov	r0, r7
 8004a94:	47c0      	blx	r8
 8004a96:	3001      	adds	r0, #1
 8004a98:	d0e6      	beq.n	8004a68 <_printf_common+0xa4>
 8004a9a:	3601      	adds	r6, #1
 8004a9c:	e7d9      	b.n	8004a52 <_printf_common+0x8e>
	...

08004aa0 <_printf_i>:
 8004aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	7e0f      	ldrb	r7, [r1, #24]
 8004aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004aa8:	2f78      	cmp	r7, #120	; 0x78
 8004aaa:	4691      	mov	r9, r2
 8004aac:	4680      	mov	r8, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	469a      	mov	sl, r3
 8004ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ab6:	d807      	bhi.n	8004ac8 <_printf_i+0x28>
 8004ab8:	2f62      	cmp	r7, #98	; 0x62
 8004aba:	d80a      	bhi.n	8004ad2 <_printf_i+0x32>
 8004abc:	2f00      	cmp	r7, #0
 8004abe:	f000 80d4 	beq.w	8004c6a <_printf_i+0x1ca>
 8004ac2:	2f58      	cmp	r7, #88	; 0x58
 8004ac4:	f000 80c0 	beq.w	8004c48 <_printf_i+0x1a8>
 8004ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ad0:	e03a      	b.n	8004b48 <_printf_i+0xa8>
 8004ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ad6:	2b15      	cmp	r3, #21
 8004ad8:	d8f6      	bhi.n	8004ac8 <_printf_i+0x28>
 8004ada:	a101      	add	r1, pc, #4	; (adr r1, 8004ae0 <_printf_i+0x40>)
 8004adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ae0:	08004b39 	.word	0x08004b39
 8004ae4:	08004b4d 	.word	0x08004b4d
 8004ae8:	08004ac9 	.word	0x08004ac9
 8004aec:	08004ac9 	.word	0x08004ac9
 8004af0:	08004ac9 	.word	0x08004ac9
 8004af4:	08004ac9 	.word	0x08004ac9
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004ac9 	.word	0x08004ac9
 8004b00:	08004ac9 	.word	0x08004ac9
 8004b04:	08004ac9 	.word	0x08004ac9
 8004b08:	08004ac9 	.word	0x08004ac9
 8004b0c:	08004c51 	.word	0x08004c51
 8004b10:	08004b79 	.word	0x08004b79
 8004b14:	08004c0b 	.word	0x08004c0b
 8004b18:	08004ac9 	.word	0x08004ac9
 8004b1c:	08004ac9 	.word	0x08004ac9
 8004b20:	08004c73 	.word	0x08004c73
 8004b24:	08004ac9 	.word	0x08004ac9
 8004b28:	08004b79 	.word	0x08004b79
 8004b2c:	08004ac9 	.word	0x08004ac9
 8004b30:	08004ac9 	.word	0x08004ac9
 8004b34:	08004c13 	.word	0x08004c13
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	1d1a      	adds	r2, r3, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	602a      	str	r2, [r5, #0]
 8004b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e09f      	b.n	8004c8c <_printf_i+0x1ec>
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	0607      	lsls	r7, r0, #24
 8004b52:	f103 0104 	add.w	r1, r3, #4
 8004b56:	6029      	str	r1, [r5, #0]
 8004b58:	d501      	bpl.n	8004b5e <_printf_i+0xbe>
 8004b5a:	681e      	ldr	r6, [r3, #0]
 8004b5c:	e003      	b.n	8004b66 <_printf_i+0xc6>
 8004b5e:	0646      	lsls	r6, r0, #25
 8004b60:	d5fb      	bpl.n	8004b5a <_printf_i+0xba>
 8004b62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	da03      	bge.n	8004b72 <_printf_i+0xd2>
 8004b6a:	232d      	movs	r3, #45	; 0x2d
 8004b6c:	4276      	negs	r6, r6
 8004b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b72:	485a      	ldr	r0, [pc, #360]	; (8004cdc <_printf_i+0x23c>)
 8004b74:	230a      	movs	r3, #10
 8004b76:	e012      	b.n	8004b9e <_printf_i+0xfe>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	6820      	ldr	r0, [r4, #0]
 8004b7c:	1d19      	adds	r1, r3, #4
 8004b7e:	6029      	str	r1, [r5, #0]
 8004b80:	0605      	lsls	r5, r0, #24
 8004b82:	d501      	bpl.n	8004b88 <_printf_i+0xe8>
 8004b84:	681e      	ldr	r6, [r3, #0]
 8004b86:	e002      	b.n	8004b8e <_printf_i+0xee>
 8004b88:	0641      	lsls	r1, r0, #25
 8004b8a:	d5fb      	bpl.n	8004b84 <_printf_i+0xe4>
 8004b8c:	881e      	ldrh	r6, [r3, #0]
 8004b8e:	4853      	ldr	r0, [pc, #332]	; (8004cdc <_printf_i+0x23c>)
 8004b90:	2f6f      	cmp	r7, #111	; 0x6f
 8004b92:	bf0c      	ite	eq
 8004b94:	2308      	moveq	r3, #8
 8004b96:	230a      	movne	r3, #10
 8004b98:	2100      	movs	r1, #0
 8004b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b9e:	6865      	ldr	r5, [r4, #4]
 8004ba0:	60a5      	str	r5, [r4, #8]
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	bfa2      	ittt	ge
 8004ba6:	6821      	ldrge	r1, [r4, #0]
 8004ba8:	f021 0104 	bicge.w	r1, r1, #4
 8004bac:	6021      	strge	r1, [r4, #0]
 8004bae:	b90e      	cbnz	r6, 8004bb4 <_printf_i+0x114>
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	d04b      	beq.n	8004c4c <_printf_i+0x1ac>
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bba:	fb03 6711 	mls	r7, r3, r1, r6
 8004bbe:	5dc7      	ldrb	r7, [r0, r7]
 8004bc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004bc4:	4637      	mov	r7, r6
 8004bc6:	42bb      	cmp	r3, r7
 8004bc8:	460e      	mov	r6, r1
 8004bca:	d9f4      	bls.n	8004bb6 <_printf_i+0x116>
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d10b      	bne.n	8004be8 <_printf_i+0x148>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	07de      	lsls	r6, r3, #31
 8004bd4:	d508      	bpl.n	8004be8 <_printf_i+0x148>
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	6861      	ldr	r1, [r4, #4]
 8004bda:	4299      	cmp	r1, r3
 8004bdc:	bfde      	ittt	le
 8004bde:	2330      	movle	r3, #48	; 0x30
 8004be0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004be4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004be8:	1b52      	subs	r2, r2, r5
 8004bea:	6122      	str	r2, [r4, #16]
 8004bec:	f8cd a000 	str.w	sl, [sp]
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	aa03      	add	r2, sp, #12
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f7ff fee4 	bl	80049c4 <_printf_common>
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d14a      	bne.n	8004c96 <_printf_i+0x1f6>
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	b004      	add	sp, #16
 8004c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	f043 0320 	orr.w	r3, r3, #32
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	4833      	ldr	r0, [pc, #204]	; (8004ce0 <_printf_i+0x240>)
 8004c14:	2778      	movs	r7, #120	; 0x78
 8004c16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	6829      	ldr	r1, [r5, #0]
 8004c1e:	061f      	lsls	r7, r3, #24
 8004c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c24:	d402      	bmi.n	8004c2c <_printf_i+0x18c>
 8004c26:	065f      	lsls	r7, r3, #25
 8004c28:	bf48      	it	mi
 8004c2a:	b2b6      	uxthmi	r6, r6
 8004c2c:	07df      	lsls	r7, r3, #31
 8004c2e:	bf48      	it	mi
 8004c30:	f043 0320 	orrmi.w	r3, r3, #32
 8004c34:	6029      	str	r1, [r5, #0]
 8004c36:	bf48      	it	mi
 8004c38:	6023      	strmi	r3, [r4, #0]
 8004c3a:	b91e      	cbnz	r6, 8004c44 <_printf_i+0x1a4>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	f023 0320 	bic.w	r3, r3, #32
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	2310      	movs	r3, #16
 8004c46:	e7a7      	b.n	8004b98 <_printf_i+0xf8>
 8004c48:	4824      	ldr	r0, [pc, #144]	; (8004cdc <_printf_i+0x23c>)
 8004c4a:	e7e4      	b.n	8004c16 <_printf_i+0x176>
 8004c4c:	4615      	mov	r5, r2
 8004c4e:	e7bd      	b.n	8004bcc <_printf_i+0x12c>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	6826      	ldr	r6, [r4, #0]
 8004c54:	6961      	ldr	r1, [r4, #20]
 8004c56:	1d18      	adds	r0, r3, #4
 8004c58:	6028      	str	r0, [r5, #0]
 8004c5a:	0635      	lsls	r5, r6, #24
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	d501      	bpl.n	8004c64 <_printf_i+0x1c4>
 8004c60:	6019      	str	r1, [r3, #0]
 8004c62:	e002      	b.n	8004c6a <_printf_i+0x1ca>
 8004c64:	0670      	lsls	r0, r6, #25
 8004c66:	d5fb      	bpl.n	8004c60 <_printf_i+0x1c0>
 8004c68:	8019      	strh	r1, [r3, #0]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6123      	str	r3, [r4, #16]
 8004c6e:	4615      	mov	r5, r2
 8004c70:	e7bc      	b.n	8004bec <_printf_i+0x14c>
 8004c72:	682b      	ldr	r3, [r5, #0]
 8004c74:	1d1a      	adds	r2, r3, #4
 8004c76:	602a      	str	r2, [r5, #0]
 8004c78:	681d      	ldr	r5, [r3, #0]
 8004c7a:	6862      	ldr	r2, [r4, #4]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f7fb fab6 	bl	80001f0 <memchr>
 8004c84:	b108      	cbz	r0, 8004c8a <_printf_i+0x1ea>
 8004c86:	1b40      	subs	r0, r0, r5
 8004c88:	6060      	str	r0, [r4, #4]
 8004c8a:	6863      	ldr	r3, [r4, #4]
 8004c8c:	6123      	str	r3, [r4, #16]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c94:	e7aa      	b.n	8004bec <_printf_i+0x14c>
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	462a      	mov	r2, r5
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	47d0      	blx	sl
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d0ad      	beq.n	8004c00 <_printf_i+0x160>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	079b      	lsls	r3, r3, #30
 8004ca8:	d413      	bmi.n	8004cd2 <_printf_i+0x232>
 8004caa:	68e0      	ldr	r0, [r4, #12]
 8004cac:	9b03      	ldr	r3, [sp, #12]
 8004cae:	4298      	cmp	r0, r3
 8004cb0:	bfb8      	it	lt
 8004cb2:	4618      	movlt	r0, r3
 8004cb4:	e7a6      	b.n	8004c04 <_printf_i+0x164>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4632      	mov	r2, r6
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	47d0      	blx	sl
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d09d      	beq.n	8004c00 <_printf_i+0x160>
 8004cc4:	3501      	adds	r5, #1
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	9903      	ldr	r1, [sp, #12]
 8004cca:	1a5b      	subs	r3, r3, r1
 8004ccc:	42ab      	cmp	r3, r5
 8004cce:	dcf2      	bgt.n	8004cb6 <_printf_i+0x216>
 8004cd0:	e7eb      	b.n	8004caa <_printf_i+0x20a>
 8004cd2:	2500      	movs	r5, #0
 8004cd4:	f104 0619 	add.w	r6, r4, #25
 8004cd8:	e7f5      	b.n	8004cc6 <_printf_i+0x226>
 8004cda:	bf00      	nop
 8004cdc:	08004e3d 	.word	0x08004e3d
 8004ce0:	08004e4e 	.word	0x08004e4e

08004ce4 <memmove>:
 8004ce4:	4288      	cmp	r0, r1
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	eb01 0402 	add.w	r4, r1, r2
 8004cec:	d902      	bls.n	8004cf4 <memmove+0x10>
 8004cee:	4284      	cmp	r4, r0
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	d807      	bhi.n	8004d04 <memmove+0x20>
 8004cf4:	1e43      	subs	r3, r0, #1
 8004cf6:	42a1      	cmp	r1, r4
 8004cf8:	d008      	beq.n	8004d0c <memmove+0x28>
 8004cfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d02:	e7f8      	b.n	8004cf6 <memmove+0x12>
 8004d04:	4402      	add	r2, r0
 8004d06:	4601      	mov	r1, r0
 8004d08:	428a      	cmp	r2, r1
 8004d0a:	d100      	bne.n	8004d0e <memmove+0x2a>
 8004d0c:	bd10      	pop	{r4, pc}
 8004d0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d16:	e7f7      	b.n	8004d08 <memmove+0x24>

08004d18 <_sbrk_r>:
 8004d18:	b538      	push	{r3, r4, r5, lr}
 8004d1a:	4d06      	ldr	r5, [pc, #24]	; (8004d34 <_sbrk_r+0x1c>)
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4604      	mov	r4, r0
 8004d20:	4608      	mov	r0, r1
 8004d22:	602b      	str	r3, [r5, #0]
 8004d24:	f7fc f878 	bl	8000e18 <_sbrk>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d102      	bne.n	8004d32 <_sbrk_r+0x1a>
 8004d2c:	682b      	ldr	r3, [r5, #0]
 8004d2e:	b103      	cbz	r3, 8004d32 <_sbrk_r+0x1a>
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	bd38      	pop	{r3, r4, r5, pc}
 8004d34:	20000380 	.word	0x20000380

08004d38 <memcpy>:
 8004d38:	440a      	add	r2, r1
 8004d3a:	4291      	cmp	r1, r2
 8004d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d40:	d100      	bne.n	8004d44 <memcpy+0xc>
 8004d42:	4770      	bx	lr
 8004d44:	b510      	push	{r4, lr}
 8004d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d4e:	4291      	cmp	r1, r2
 8004d50:	d1f9      	bne.n	8004d46 <memcpy+0xe>
 8004d52:	bd10      	pop	{r4, pc}

08004d54 <_realloc_r>:
 8004d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d58:	4680      	mov	r8, r0
 8004d5a:	4614      	mov	r4, r2
 8004d5c:	460e      	mov	r6, r1
 8004d5e:	b921      	cbnz	r1, 8004d6a <_realloc_r+0x16>
 8004d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d64:	4611      	mov	r1, r2
 8004d66:	f7ff bc49 	b.w	80045fc <_malloc_r>
 8004d6a:	b92a      	cbnz	r2, 8004d78 <_realloc_r+0x24>
 8004d6c:	f7ff fbda 	bl	8004524 <_free_r>
 8004d70:	4625      	mov	r5, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d78:	f000 f81b 	bl	8004db2 <_malloc_usable_size_r>
 8004d7c:	4284      	cmp	r4, r0
 8004d7e:	4607      	mov	r7, r0
 8004d80:	d802      	bhi.n	8004d88 <_realloc_r+0x34>
 8004d82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d86:	d812      	bhi.n	8004dae <_realloc_r+0x5a>
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	f7ff fc36 	bl	80045fc <_malloc_r>
 8004d90:	4605      	mov	r5, r0
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d0ed      	beq.n	8004d72 <_realloc_r+0x1e>
 8004d96:	42bc      	cmp	r4, r7
 8004d98:	4622      	mov	r2, r4
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	bf28      	it	cs
 8004d9e:	463a      	movcs	r2, r7
 8004da0:	f7ff ffca 	bl	8004d38 <memcpy>
 8004da4:	4631      	mov	r1, r6
 8004da6:	4640      	mov	r0, r8
 8004da8:	f7ff fbbc 	bl	8004524 <_free_r>
 8004dac:	e7e1      	b.n	8004d72 <_realloc_r+0x1e>
 8004dae:	4635      	mov	r5, r6
 8004db0:	e7df      	b.n	8004d72 <_realloc_r+0x1e>

08004db2 <_malloc_usable_size_r>:
 8004db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db6:	1f18      	subs	r0, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bfbc      	itt	lt
 8004dbc:	580b      	ldrlt	r3, [r1, r0]
 8004dbe:	18c0      	addlt	r0, r0, r3
 8004dc0:	4770      	bx	lr
	...

08004dc4 <_init>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr

08004dd0 <_fini>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	bf00      	nop
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr
